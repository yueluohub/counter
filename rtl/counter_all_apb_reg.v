//  $Id: $
//  $Revision: $
//  $Date: $
//  $Author: $
//  Automatically generated by register_slave.pl version 45c456a
//
`timescale 1ns / 1ps
//spyglass disable_block W240, W362, W528

`include "counter_all_apb_reg_v.h"

module counter_all_apb_reg
(
	// Inputs from AHB Slave
	input		hclk,
	input		hrst_n,
	input	[10:0]	haddr_11w,
	input	[31:0]	hwdata_32w,
	input		hwen,
	input		hren,

	// Outputs to AHB Slave And User Defined Registers
	output reg [31:0] hrdata_32w,
	input	[31:0]	sts_intr_status_counter,
	input	[31:0]	sts_intr_mask_status_counter,
	output		wen_intr_clr,
	output reg	wen_intr_clr_d,
	output	[31:0]	ctl_intr_clr_counter,
	output		wen_intr_set,
	output reg	wen_intr_set_d,
	output	[31:0]	ctl_intr_set_counter,
	output		wen_intr_mask_set,
	output reg	wen_intr_mask_set_d,
	output	[31:0]	ctl_intr_mask_set_counter,
	output		wen_intr_mask_clr,
	output reg	wen_intr_mask_clr_d,
	output	[31:0]	ctl_intr_mask_clr_counter,
	output		o_intrctrl_sreset,
	output		o_global_start_trigger,
	output		o_global_stop_trigger,
	output		o_global_clear_trigger,
	output		o_global_reset_trigger,
	output		o_single_start_trigger_c0,
	output		o_single_stop_trigger_c0,
	output		o_single_clear_trigger_c0,
	output		o_single_reset_trigger_c0,
	output		o_enable_c0,
	output	[7:0]	o_clk_ctrl_c0,
	output	[7:0]	o_soft_trigger_ctrl_c0,
	output	[3:0]	o_mux_sel_c0,
	output	[3:0]	o_src_sel_start_c0,
	output	[1:0]	o_src_edge_start_c0,
	output	[3:0]	o_src_sel_stop_c0,
	output	[1:0]	o_src_edge_stop_c0,
	output	[3:0]	o_src_sel_din0_c0,
	output	[1:0]	o_src_edge_din0_c0,
	output	[3:0]	o_src_sel_din1_c0,
	output	[1:0]	o_src_edge_din1_c0,
	output		ren_snap_status_c0,
	output reg 	ren_snap_status_c0_d,
	input	[3:0]	i_snap_status_c0,
	output		wen_ctrl_snap_c0,
	output reg	wen_ctrl_snap_c0_d,
	output	[3:0]	o_ctrl_snap_c0,
	output		o_clear_snap_c0,
	input	[31:0]	i_shadow_reg_c0,
	output	[2:0]	o_mode_sel_c0,
	output	[5:0]	o_target_reg_ctrl_c0,
	output	[31:0]	o_target_reg_a0_c0,
	output		wen_target_reg_a1_c0,
	output reg	wen_target_reg_a1_c0_d,
	output	[31:0]	o_target_reg_a1_c0,
	output	[31:0]	o_target_reg_a2_c0,
	output	[31:0]	o_target_reg_b0_c0,
	output	[31:0]	o_target_reg_b1_c0,
	output	[31:0]	o_target_reg_b2_c0,
	input	[5:0]	i_capture_reg_status_c0,
	output	[5:0]	o_capture_reg_overflow_ctrl_c0,
	output		ren_capture_reg_a0_c0,
	output reg 	ren_capture_reg_a0_c0_d,
	input	[31:0]	i_capture_reg_a0_c0,
	output		ren_capture_reg_a1_c0,
	output reg 	ren_capture_reg_a1_c0_d,
	input	[31:0]	i_capture_reg_a1_c0,
	output		ren_capture_reg_a2_c0,
	output reg 	ren_capture_reg_a2_c0_d,
	input	[31:0]	i_capture_reg_a2_c0,
	output		ren_capture_reg_b0_c0,
	output reg 	ren_capture_reg_b0_c0_d,
	input	[31:0]	i_capture_reg_b0_c0,
	output		ren_capture_reg_b1_c0,
	output reg 	ren_capture_reg_b1_c0_d,
	input	[31:0]	i_capture_reg_b1_c0,
	output		ren_capture_reg_b2_c0,
	output reg 	ren_capture_reg_b2_c0_d,
	input	[31:0]	i_capture_reg_b2_c0,
	output	[15:0]	o_switch_mode_onebit_cnts_c0,
	output	[7:0]	o_waveform_mode_cnts_c0,
	output	[7:0]	o_capture_mode_cnts_c0,
	output		o_waveform_mode_automatic_sw_c0,
	output		o_capture_mode_automatic_sw_c0,
	output		o_shiftmode_ctrl_c0,
	output	[4:0]	o_shiftout_data_ctrl_bitcnts_c0,
	output	[31:0]	o_shiftout_data_c0,
	output		wen_shiftout_data_valid_c0,
	output reg	wen_shiftout_data_valid_c0_d,
	output		o_shiftout_data_valid_c0,
	output	[4:0]	o_shiftin_data_ctrl_bitcnts_c0,
	input	[31:0]	i_shiftin_data_c0,
	input	[31:0]	i_shiftin_databits_updated_c0,
	output		o_single_start_trigger_c1,
	output		o_single_stop_trigger_c1,
	output		o_single_clear_trigger_c1,
	output		o_single_reset_trigger_c1,
	output		o_enable_c1,
	output	[7:0]	o_clk_ctrl_c1,
	output	[7:0]	o_soft_trigger_ctrl_c1,
	output	[3:0]	o_mux_sel_c1,
	output	[3:0]	o_src_sel_start_c1,
	output	[1:0]	o_src_edge_start_c1,
	output	[3:0]	o_src_sel_stop_c1,
	output	[1:0]	o_src_edge_stop_c1,
	output	[3:0]	o_src_sel_din0_c1,
	output	[1:0]	o_src_edge_din0_c1,
	output	[3:0]	o_src_sel_din1_c1,
	output	[1:0]	o_src_edge_din1_c1,
	output		ren_snap_status_c1,
	output reg 	ren_snap_status_c1_d,
	input	[3:0]	i_snap_status_c1,
	output		wen_ctrl_snap_c1,
	output reg	wen_ctrl_snap_c1_d,
	output	[3:0]	o_ctrl_snap_c1,
	output		o_clear_snap_c1,
	input	[31:0]	i_shadow_reg_c1,
	output	[2:0]	o_mode_sel_c1,
	output	[5:0]	o_target_reg_ctrl_c1,
	output	[31:0]	o_target_reg_a0_c1,
	output		wen_target_reg_a1_c1,
	output reg	wen_target_reg_a1_c1_d,
	output	[31:0]	o_target_reg_a1_c1,
	output	[31:0]	o_target_reg_a2_c1,
	output	[31:0]	o_target_reg_b0_c1,
	output	[31:0]	o_target_reg_b1_c1,
	output	[31:0]	o_target_reg_b2_c1,
	input	[5:0]	i_capture_reg_status_c1,
	output	[5:0]	o_capture_reg_overflow_ctrl_c1,
	output		ren_capture_reg_a0_c1,
	output reg 	ren_capture_reg_a0_c1_d,
	input	[31:0]	i_capture_reg_a0_c1,
	output		ren_capture_reg_a1_c1,
	output reg 	ren_capture_reg_a1_c1_d,
	input	[31:0]	i_capture_reg_a1_c1,
	output		ren_capture_reg_a2_c1,
	output reg 	ren_capture_reg_a2_c1_d,
	input	[31:0]	i_capture_reg_a2_c1,
	output		ren_capture_reg_b0_c1,
	output reg 	ren_capture_reg_b0_c1_d,
	input	[31:0]	i_capture_reg_b0_c1,
	output		ren_capture_reg_b1_c1,
	output reg 	ren_capture_reg_b1_c1_d,
	input	[31:0]	i_capture_reg_b1_c1,
	output		ren_capture_reg_b2_c1,
	output reg 	ren_capture_reg_b2_c1_d,
	input	[31:0]	i_capture_reg_b2_c1,
	output	[15:0]	o_switch_mode_onebit_cnts_c1,
	output	[7:0]	o_waveform_mode_cnts_c1,
	output	[7:0]	o_capture_mode_cnts_c1,
	output		o_waveform_mode_automatic_sw_c1,
	output		o_capture_mode_automatic_sw_c1,
	output		o_shiftmode_ctrl_c1,
	output	[4:0]	o_shiftout_data_ctrl_bitcnts_c1,
	output	[31:0]	o_shiftout_data_c1,
	output		wen_shiftout_data_valid_c1,
	output reg	wen_shiftout_data_valid_c1_d,
	output		o_shiftout_data_valid_c1,
	output	[4:0]	o_shiftin_data_ctrl_bitcnts_c1,
	input	[31:0]	i_shiftin_data_c1,
	input	[31:0]	i_shiftin_databits_updated_c1,
	output		o_single_start_trigger_c2,
	output		o_single_stop_trigger_c2,
	output		o_single_clear_trigger_c2,
	output		o_single_reset_trigger_c2,
	output		o_enable_c2,
	output	[7:0]	o_clk_ctrl_c2,
	output	[7:0]	o_soft_trigger_ctrl_c2,
	output	[3:0]	o_mux_sel_c2,
	output	[3:0]	o_src_sel_start_c2,
	output	[1:0]	o_src_edge_start_c2,
	output	[3:0]	o_src_sel_stop_c2,
	output	[1:0]	o_src_edge_stop_c2,
	output	[3:0]	o_src_sel_din0_c2,
	output	[1:0]	o_src_edge_din0_c2,
	output	[3:0]	o_src_sel_din1_c2,
	output	[1:0]	o_src_edge_din1_c2,
	output		ren_snap_status_c2,
	output reg 	ren_snap_status_c2_d,
	input	[3:0]	i_snap_status_c2,
	output		wen_ctrl_snap_c2,
	output reg	wen_ctrl_snap_c2_d,
	output	[3:0]	o_ctrl_snap_c2,
	output		o_clear_snap_c2,
	input	[31:0]	i_shadow_reg_c2,
	output	[2:0]	o_mode_sel_c2,
	output	[5:0]	o_target_reg_ctrl_c2,
	output	[31:0]	o_target_reg_a0_c2,
	output		wen_target_reg_a1_c2,
	output reg	wen_target_reg_a1_c2_d,
	output	[31:0]	o_target_reg_a1_c2,
	output	[31:0]	o_target_reg_a2_c2,
	output	[31:0]	o_target_reg_b0_c2,
	output	[31:0]	o_target_reg_b1_c2,
	output	[31:0]	o_target_reg_b2_c2,
	input	[5:0]	i_capture_reg_status_c2,
	output	[5:0]	o_capture_reg_overflow_ctrl_c2,
	output		ren_capture_reg_a0_c2,
	output reg 	ren_capture_reg_a0_c2_d,
	input	[31:0]	i_capture_reg_a0_c2,
	output		ren_capture_reg_a1_c2,
	output reg 	ren_capture_reg_a1_c2_d,
	input	[31:0]	i_capture_reg_a1_c2,
	output		ren_capture_reg_a2_c2,
	output reg 	ren_capture_reg_a2_c2_d,
	input	[31:0]	i_capture_reg_a2_c2,
	output		ren_capture_reg_b0_c2,
	output reg 	ren_capture_reg_b0_c2_d,
	input	[31:0]	i_capture_reg_b0_c2,
	output		ren_capture_reg_b1_c2,
	output reg 	ren_capture_reg_b1_c2_d,
	input	[31:0]	i_capture_reg_b1_c2,
	output		ren_capture_reg_b2_c2,
	output reg 	ren_capture_reg_b2_c2_d,
	input	[31:0]	i_capture_reg_b2_c2,
	output	[15:0]	o_switch_mode_onebit_cnts_c2,
	output	[7:0]	o_waveform_mode_cnts_c2,
	output	[7:0]	o_capture_mode_cnts_c2,
	output		o_waveform_mode_automatic_sw_c2,
	output		o_capture_mode_automatic_sw_c2,
	output		o_shiftmode_ctrl_c2,
	output	[4:0]	o_shiftout_data_ctrl_bitcnts_c2,
	output	[31:0]	o_shiftout_data_c2,
	output		wen_shiftout_data_valid_c2,
	output reg	wen_shiftout_data_valid_c2_d,
	output		o_shiftout_data_valid_c2,
	output	[4:0]	o_shiftin_data_ctrl_bitcnts_c2,
	input	[31:0]	i_shiftin_data_c2,
	input	[31:0]	i_shiftin_databits_updated_c2,
	output		o_single_start_trigger_c3,
	output		o_single_stop_trigger_c3,
	output		o_single_clear_trigger_c3,
	output		o_single_reset_trigger_c3,
	output		o_enable_c3,
	output	[7:0]	o_clk_ctrl_c3,
	output	[7:0]	o_soft_trigger_ctrl_c3,
	output	[3:0]	o_mux_sel_c3,
	output	[3:0]	o_src_sel_start_c3,
	output	[1:0]	o_src_edge_start_c3,
	output	[3:0]	o_src_sel_stop_c3,
	output	[1:0]	o_src_edge_stop_c3,
	output	[3:0]	o_src_sel_din0_c3,
	output	[1:0]	o_src_edge_din0_c3,
	output	[3:0]	o_src_sel_din1_c3,
	output	[1:0]	o_src_edge_din1_c3,
	output		ren_snap_status_c3,
	output reg 	ren_snap_status_c3_d,
	input	[3:0]	i_snap_status_c3,
	output		wen_ctrl_snap_c3,
	output reg	wen_ctrl_snap_c3_d,
	output	[3:0]	o_ctrl_snap_c3,
	output		o_clear_snap_c3,
	input	[31:0]	i_shadow_reg_c3,
	output	[2:0]	o_mode_sel_c3,
	output	[5:0]	o_target_reg_ctrl_c3,
	output	[31:0]	o_target_reg_a0_c3,
	output		wen_target_reg_a1_c3,
	output reg	wen_target_reg_a1_c3_d,
	output	[31:0]	o_target_reg_a1_c3,
	output	[31:0]	o_target_reg_a2_c3,
	output	[31:0]	o_target_reg_b0_c3,
	output	[31:0]	o_target_reg_b1_c3,
	output	[31:0]	o_target_reg_b2_c3,
	input	[5:0]	i_capture_reg_status_c3,
	output	[5:0]	o_capture_reg_overflow_ctrl_c3,
	output		ren_capture_reg_a0_c3,
	output reg 	ren_capture_reg_a0_c3_d,
	input	[31:0]	i_capture_reg_a0_c3,
	output		ren_capture_reg_a1_c3,
	output reg 	ren_capture_reg_a1_c3_d,
	input	[31:0]	i_capture_reg_a1_c3,
	output		ren_capture_reg_a2_c3,
	output reg 	ren_capture_reg_a2_c3_d,
	input	[31:0]	i_capture_reg_a2_c3,
	output		ren_capture_reg_b0_c3,
	output reg 	ren_capture_reg_b0_c3_d,
	input	[31:0]	i_capture_reg_b0_c3,
	output		ren_capture_reg_b1_c3,
	output reg 	ren_capture_reg_b1_c3_d,
	input	[31:0]	i_capture_reg_b1_c3,
	output		ren_capture_reg_b2_c3,
	output reg 	ren_capture_reg_b2_c3_d,
	input	[31:0]	i_capture_reg_b2_c3,
	output	[15:0]	o_switch_mode_onebit_cnts_c3,
	output	[7:0]	o_waveform_mode_cnts_c3,
	output	[7:0]	o_capture_mode_cnts_c3,
	output		o_waveform_mode_automatic_sw_c3,
	output		o_capture_mode_automatic_sw_c3,
	output		o_shiftmode_ctrl_c3,
	output	[4:0]	o_shiftout_data_ctrl_bitcnts_c3,
	output	[31:0]	o_shiftout_data_c3,
	output		wen_shiftout_data_valid_c3,
	output reg	wen_shiftout_data_valid_c3_d,
	output		o_shiftout_data_valid_c3,
	output	[4:0]	o_shiftin_data_ctrl_bitcnts_c3,
	input	[31:0]	i_shiftin_data_c3,
	input	[31:0]	i_shiftin_databits_updated_c3
);



// User Requested Register Declarations
reg	[31:0]	intr_clr;
reg	[31:0]	intr_set;
reg	[31:0]	intr_mask_set;
reg	[31:0]	intr_mask_clr;
reg	[0:0]	intr_sreset;
reg	[0:0]	global_start_trigger;
reg	[0:0]	global_stop_trigger;
reg	[0:0]	global_clear_trigger;
reg	[0:0]	global_reset_trigger;
reg	[0:0]	single_start_trigger_c0;
reg	[0:0]	single_stop_trigger_c0;
reg	[0:0]	single_clear_trigger_c0;
reg	[0:0]	single_reset_trigger_c0;
reg	[15:0]	enable_c0;
reg	[7:0]	soft_trigger_ctrl_c0;
reg	[3:0]	mux_sel_c0;
reg	[29:0]	src_sel_edge_c0;
reg	[16:0]	ctrl_snap_c0;
reg	[2:0]	mode_sel_c0;
reg	[5:0]	target_reg_ctrl_c0;
reg	[31:0]	target_reg_a0_c0;
reg	[31:0]	target_reg_a1_c0;
reg	[31:0]	target_reg_a2_c0;
reg	[31:0]	target_reg_b0_c0;
reg	[31:0]	target_reg_b1_c0;
reg	[31:0]	target_reg_b2_c0;
reg	[5:0]	capture_reg_overflow_ctrl_c0;
reg	[15:0]	switch_mode_onebit_cnts_c0;
reg	[24:0]	waveform_mode_automatic_c0;
reg	[0:0]	shiftmode_ctrl_c0;
reg	[4:0]	shiftout_data_ctrl_bitcnts_c0;
reg	[31:0]	shiftout_data_c0;
reg	[0:0]	shiftout_data_valid_c0;
reg	[4:0]	shiftin_data_ctrl_bitcnts_c0;
reg	[0:0]	single_start_trigger_c1;
reg	[0:0]	single_stop_trigger_c1;
reg	[0:0]	single_clear_trigger_c1;
reg	[0:0]	single_reset_trigger_c1;
reg	[15:0]	enable_c1;
reg	[7:0]	soft_trigger_ctrl_c1;
reg	[3:0]	mux_sel_c1;
reg	[29:0]	src_sel_edge_c1;
reg	[16:0]	ctrl_snap_c1;
reg	[2:0]	mode_sel_c1;
reg	[5:0]	target_reg_ctrl_c1;
reg	[31:0]	target_reg_a0_c1;
reg	[31:0]	target_reg_a1_c1;
reg	[31:0]	target_reg_a2_c1;
reg	[31:0]	target_reg_b0_c1;
reg	[31:0]	target_reg_b1_c1;
reg	[31:0]	target_reg_b2_c1;
reg	[5:0]	capture_reg_overflow_ctrl_c1;
reg	[15:0]	switch_mode_onebit_cnts_c1;
reg	[24:0]	waveform_mode_automatic_c1;
reg	[0:0]	shiftmode_ctrl_c1;
reg	[4:0]	shiftout_data_ctrl_bitcnts_c1;
reg	[31:0]	shiftout_data_c1;
reg	[0:0]	shiftout_data_valid_c1;
reg	[4:0]	shiftin_data_ctrl_bitcnts_c1;
reg	[0:0]	single_start_trigger_c2;
reg	[0:0]	single_stop_trigger_c2;
reg	[0:0]	single_clear_trigger_c2;
reg	[0:0]	single_reset_trigger_c2;
reg	[15:0]	enable_c2;
reg	[7:0]	soft_trigger_ctrl_c2;
reg	[3:0]	mux_sel_c2;
reg	[29:0]	src_sel_edge_c2;
reg	[16:0]	ctrl_snap_c2;
reg	[2:0]	mode_sel_c2;
reg	[5:0]	target_reg_ctrl_c2;
reg	[31:0]	target_reg_a0_c2;
reg	[31:0]	target_reg_a1_c2;
reg	[31:0]	target_reg_a2_c2;
reg	[31:0]	target_reg_b0_c2;
reg	[31:0]	target_reg_b1_c2;
reg	[31:0]	target_reg_b2_c2;
reg	[5:0]	capture_reg_overflow_ctrl_c2;
reg	[15:0]	switch_mode_onebit_cnts_c2;
reg	[24:0]	waveform_mode_automatic_c2;
reg	[0:0]	shiftmode_ctrl_c2;
reg	[4:0]	shiftout_data_ctrl_bitcnts_c2;
reg	[31:0]	shiftout_data_c2;
reg	[0:0]	shiftout_data_valid_c2;
reg	[4:0]	shiftin_data_ctrl_bitcnts_c2;
reg	[0:0]	single_start_trigger_c3;
reg	[0:0]	single_stop_trigger_c3;
reg	[0:0]	single_clear_trigger_c3;
reg	[0:0]	single_reset_trigger_c3;
reg	[15:0]	enable_c3;
reg	[7:0]	soft_trigger_ctrl_c3;
reg	[3:0]	mux_sel_c3;
reg	[29:0]	src_sel_edge_c3;
reg	[16:0]	ctrl_snap_c3;
reg	[2:0]	mode_sel_c3;
reg	[5:0]	target_reg_ctrl_c3;
reg	[31:0]	target_reg_a0_c3;
reg	[31:0]	target_reg_a1_c3;
reg	[31:0]	target_reg_a2_c3;
reg	[31:0]	target_reg_b0_c3;
reg	[31:0]	target_reg_b1_c3;
reg	[31:0]	target_reg_b2_c3;
reg	[5:0]	capture_reg_overflow_ctrl_c3;
reg	[15:0]	switch_mode_onebit_cnts_c3;
reg	[24:0]	waveform_mode_automatic_c3;
reg	[0:0]	shiftmode_ctrl_c3;
reg	[4:0]	shiftout_data_ctrl_bitcnts_c3;
reg	[31:0]	shiftout_data_c3;
reg	[0:0]	shiftout_data_valid_c3;
reg	[4:0]	shiftin_data_ctrl_bitcnts_c3;
reg	[109:0]	one_hot_reg_wire;

// Assign control outputs ctl_* from their respective registers
assign ctl_intr_clr_counter [31:0]                         = intr_clr [31:0];
assign ctl_intr_set_counter [31:0]                         = intr_set [31:0];
assign ctl_intr_mask_set_counter [31:0]                    = intr_mask_set [31:0];
assign ctl_intr_mask_clr_counter [31:0]                    = intr_mask_clr [31:0];
assign o_intrctrl_sreset                                   = intr_sreset [0];
assign o_global_start_trigger                              = global_start_trigger [0];
assign o_global_stop_trigger                               = global_stop_trigger [0];
assign o_global_clear_trigger                              = global_clear_trigger [0];
assign o_global_reset_trigger                              = global_reset_trigger [0];
assign o_single_start_trigger_c0                           = single_start_trigger_c0 [0];
assign o_single_stop_trigger_c0                            = single_stop_trigger_c0 [0];
assign o_single_clear_trigger_c0                           = single_clear_trigger_c0 [0];
assign o_single_reset_trigger_c0                           = single_reset_trigger_c0 [0];
assign o_enable_c0                                         = enable_c0 [0];
assign o_clk_ctrl_c0 [7:0]                                 = enable_c0 [15:8];
assign o_soft_trigger_ctrl_c0 [7:0]                        = soft_trigger_ctrl_c0 [7:0];
assign o_mux_sel_c0 [3:0]                                  = mux_sel_c0 [3:0];
assign o_src_sel_start_c0 [3:0]                            = src_sel_edge_c0 [3:0];
assign o_src_edge_start_c0 [1:0]                           = src_sel_edge_c0 [5:4];
assign o_src_sel_stop_c0 [3:0]                             = src_sel_edge_c0 [11:8];
assign o_src_edge_stop_c0 [1:0]                            = src_sel_edge_c0 [13:12];
assign o_src_sel_din0_c0 [3:0]                             = src_sel_edge_c0 [19:16];
assign o_src_edge_din0_c0 [1:0]                            = src_sel_edge_c0 [21:20];
assign o_src_sel_din1_c0 [3:0]                             = src_sel_edge_c0 [27:24];
assign o_src_edge_din1_c0 [1:0]                            = src_sel_edge_c0 [29:28];
assign o_ctrl_snap_c0 [3:0]                                = ctrl_snap_c0 [3:0];
assign o_clear_snap_c0                                     = ctrl_snap_c0 [16];
assign o_mode_sel_c0 [2:0]                                 = mode_sel_c0 [2:0];
assign o_target_reg_ctrl_c0 [5:0]                          = target_reg_ctrl_c0 [5:0];
assign o_target_reg_a0_c0 [31:0]                           = target_reg_a0_c0 [31:0];
assign o_target_reg_a1_c0 [31:0]                           = target_reg_a1_c0 [31:0];
assign o_target_reg_a2_c0 [31:0]                           = target_reg_a2_c0 [31:0];
assign o_target_reg_b0_c0 [31:0]                           = target_reg_b0_c0 [31:0];
assign o_target_reg_b1_c0 [31:0]                           = target_reg_b1_c0 [31:0];
assign o_target_reg_b2_c0 [31:0]                           = target_reg_b2_c0 [31:0];
assign o_capture_reg_overflow_ctrl_c0 [5:0]                = capture_reg_overflow_ctrl_c0 [5:0];
assign o_switch_mode_onebit_cnts_c0 [15:0]                 = switch_mode_onebit_cnts_c0 [15:0];
assign o_waveform_mode_cnts_c0 [7:0]                       = waveform_mode_automatic_c0 [7:0];
assign o_capture_mode_cnts_c0 [7:0]                        = waveform_mode_automatic_c0 [15:8];
assign o_waveform_mode_automatic_sw_c0                     = waveform_mode_automatic_c0 [16];
assign o_capture_mode_automatic_sw_c0                      = waveform_mode_automatic_c0 [24];
assign o_shiftmode_ctrl_c0                                 = shiftmode_ctrl_c0 [0];
assign o_shiftout_data_ctrl_bitcnts_c0 [4:0]               = shiftout_data_ctrl_bitcnts_c0 [4:0];
assign o_shiftout_data_c0 [31:0]                           = shiftout_data_c0 [31:0];
assign o_shiftout_data_valid_c0                            = shiftout_data_valid_c0 [0];
assign o_shiftin_data_ctrl_bitcnts_c0 [4:0]                = shiftin_data_ctrl_bitcnts_c0 [4:0];
assign o_single_start_trigger_c1                           = single_start_trigger_c1 [0];
assign o_single_stop_trigger_c1                            = single_stop_trigger_c1 [0];
assign o_single_clear_trigger_c1                           = single_clear_trigger_c1 [0];
assign o_single_reset_trigger_c1                           = single_reset_trigger_c1 [0];
assign o_enable_c1                                         = enable_c1 [0];
assign o_clk_ctrl_c1 [7:0]                                 = enable_c1 [15:8];
assign o_soft_trigger_ctrl_c1 [7:0]                        = soft_trigger_ctrl_c1 [7:0];
assign o_mux_sel_c1 [3:0]                                  = mux_sel_c1 [3:0];
assign o_src_sel_start_c1 [3:0]                            = src_sel_edge_c1 [3:0];
assign o_src_edge_start_c1 [1:0]                           = src_sel_edge_c1 [5:4];
assign o_src_sel_stop_c1 [3:0]                             = src_sel_edge_c1 [11:8];
assign o_src_edge_stop_c1 [1:0]                            = src_sel_edge_c1 [13:12];
assign o_src_sel_din0_c1 [3:0]                             = src_sel_edge_c1 [19:16];
assign o_src_edge_din0_c1 [1:0]                            = src_sel_edge_c1 [21:20];
assign o_src_sel_din1_c1 [3:0]                             = src_sel_edge_c1 [27:24];
assign o_src_edge_din1_c1 [1:0]                            = src_sel_edge_c1 [29:28];
assign o_ctrl_snap_c1 [3:0]                                = ctrl_snap_c1 [3:0];
assign o_clear_snap_c1                                     = ctrl_snap_c1 [16];
assign o_mode_sel_c1 [2:0]                                 = mode_sel_c1 [2:0];
assign o_target_reg_ctrl_c1 [5:0]                          = target_reg_ctrl_c1 [5:0];
assign o_target_reg_a0_c1 [31:0]                           = target_reg_a0_c1 [31:0];
assign o_target_reg_a1_c1 [31:0]                           = target_reg_a1_c1 [31:0];
assign o_target_reg_a2_c1 [31:0]                           = target_reg_a2_c1 [31:0];
assign o_target_reg_b0_c1 [31:0]                           = target_reg_b0_c1 [31:0];
assign o_target_reg_b1_c1 [31:0]                           = target_reg_b1_c1 [31:0];
assign o_target_reg_b2_c1 [31:0]                           = target_reg_b2_c1 [31:0];
assign o_capture_reg_overflow_ctrl_c1 [5:0]                = capture_reg_overflow_ctrl_c1 [5:0];
assign o_switch_mode_onebit_cnts_c1 [15:0]                 = switch_mode_onebit_cnts_c1 [15:0];
assign o_waveform_mode_cnts_c1 [7:0]                       = waveform_mode_automatic_c1 [7:0];
assign o_capture_mode_cnts_c1 [7:0]                        = waveform_mode_automatic_c1 [15:8];
assign o_waveform_mode_automatic_sw_c1                     = waveform_mode_automatic_c1 [16];
assign o_capture_mode_automatic_sw_c1                      = waveform_mode_automatic_c1 [24];
assign o_shiftmode_ctrl_c1                                 = shiftmode_ctrl_c1 [0];
assign o_shiftout_data_ctrl_bitcnts_c1 [4:0]               = shiftout_data_ctrl_bitcnts_c1 [4:0];
assign o_shiftout_data_c1 [31:0]                           = shiftout_data_c1 [31:0];
assign o_shiftout_data_valid_c1                            = shiftout_data_valid_c1 [0];
assign o_shiftin_data_ctrl_bitcnts_c1 [4:0]                = shiftin_data_ctrl_bitcnts_c1 [4:0];
assign o_single_start_trigger_c2                           = single_start_trigger_c2 [0];
assign o_single_stop_trigger_c2                            = single_stop_trigger_c2 [0];
assign o_single_clear_trigger_c2                           = single_clear_trigger_c2 [0];
assign o_single_reset_trigger_c2                           = single_reset_trigger_c2 [0];
assign o_enable_c2                                         = enable_c2 [0];
assign o_clk_ctrl_c2 [7:0]                                 = enable_c2 [15:8];
assign o_soft_trigger_ctrl_c2 [7:0]                        = soft_trigger_ctrl_c2 [7:0];
assign o_mux_sel_c2 [3:0]                                  = mux_sel_c2 [3:0];
assign o_src_sel_start_c2 [3:0]                            = src_sel_edge_c2 [3:0];
assign o_src_edge_start_c2 [1:0]                           = src_sel_edge_c2 [5:4];
assign o_src_sel_stop_c2 [3:0]                             = src_sel_edge_c2 [11:8];
assign o_src_edge_stop_c2 [1:0]                            = src_sel_edge_c2 [13:12];
assign o_src_sel_din0_c2 [3:0]                             = src_sel_edge_c2 [19:16];
assign o_src_edge_din0_c2 [1:0]                            = src_sel_edge_c2 [21:20];
assign o_src_sel_din1_c2 [3:0]                             = src_sel_edge_c2 [27:24];
assign o_src_edge_din1_c2 [1:0]                            = src_sel_edge_c2 [29:28];
assign o_ctrl_snap_c2 [3:0]                                = ctrl_snap_c2 [3:0];
assign o_clear_snap_c2                                     = ctrl_snap_c2 [16];
assign o_mode_sel_c2 [2:0]                                 = mode_sel_c2 [2:0];
assign o_target_reg_ctrl_c2 [5:0]                          = target_reg_ctrl_c2 [5:0];
assign o_target_reg_a0_c2 [31:0]                           = target_reg_a0_c2 [31:0];
assign o_target_reg_a1_c2 [31:0]                           = target_reg_a1_c2 [31:0];
assign o_target_reg_a2_c2 [31:0]                           = target_reg_a2_c2 [31:0];
assign o_target_reg_b0_c2 [31:0]                           = target_reg_b0_c2 [31:0];
assign o_target_reg_b1_c2 [31:0]                           = target_reg_b1_c2 [31:0];
assign o_target_reg_b2_c2 [31:0]                           = target_reg_b2_c2 [31:0];
assign o_capture_reg_overflow_ctrl_c2 [5:0]                = capture_reg_overflow_ctrl_c2 [5:0];
assign o_switch_mode_onebit_cnts_c2 [15:0]                 = switch_mode_onebit_cnts_c2 [15:0];
assign o_waveform_mode_cnts_c2 [7:0]                       = waveform_mode_automatic_c2 [7:0];
assign o_capture_mode_cnts_c2 [7:0]                        = waveform_mode_automatic_c2 [15:8];
assign o_waveform_mode_automatic_sw_c2                     = waveform_mode_automatic_c2 [16];
assign o_capture_mode_automatic_sw_c2                      = waveform_mode_automatic_c2 [24];
assign o_shiftmode_ctrl_c2                                 = shiftmode_ctrl_c2 [0];
assign o_shiftout_data_ctrl_bitcnts_c2 [4:0]               = shiftout_data_ctrl_bitcnts_c2 [4:0];
assign o_shiftout_data_c2 [31:0]                           = shiftout_data_c2 [31:0];
assign o_shiftout_data_valid_c2                            = shiftout_data_valid_c2 [0];
assign o_shiftin_data_ctrl_bitcnts_c2 [4:0]                = shiftin_data_ctrl_bitcnts_c2 [4:0];
assign o_single_start_trigger_c3                           = single_start_trigger_c3 [0];
assign o_single_stop_trigger_c3                            = single_stop_trigger_c3 [0];
assign o_single_clear_trigger_c3                           = single_clear_trigger_c3 [0];
assign o_single_reset_trigger_c3                           = single_reset_trigger_c3 [0];
assign o_enable_c3                                         = enable_c3 [0];
assign o_clk_ctrl_c3 [7:0]                                 = enable_c3 [15:8];
assign o_soft_trigger_ctrl_c3 [7:0]                        = soft_trigger_ctrl_c3 [7:0];
assign o_mux_sel_c3 [3:0]                                  = mux_sel_c3 [3:0];
assign o_src_sel_start_c3 [3:0]                            = src_sel_edge_c3 [3:0];
assign o_src_edge_start_c3 [1:0]                           = src_sel_edge_c3 [5:4];
assign o_src_sel_stop_c3 [3:0]                             = src_sel_edge_c3 [11:8];
assign o_src_edge_stop_c3 [1:0]                            = src_sel_edge_c3 [13:12];
assign o_src_sel_din0_c3 [3:0]                             = src_sel_edge_c3 [19:16];
assign o_src_edge_din0_c3 [1:0]                            = src_sel_edge_c3 [21:20];
assign o_src_sel_din1_c3 [3:0]                             = src_sel_edge_c3 [27:24];
assign o_src_edge_din1_c3 [1:0]                            = src_sel_edge_c3 [29:28];
assign o_ctrl_snap_c3 [3:0]                                = ctrl_snap_c3 [3:0];
assign o_clear_snap_c3                                     = ctrl_snap_c3 [16];
assign o_mode_sel_c3 [2:0]                                 = mode_sel_c3 [2:0];
assign o_target_reg_ctrl_c3 [5:0]                          = target_reg_ctrl_c3 [5:0];
assign o_target_reg_a0_c3 [31:0]                           = target_reg_a0_c3 [31:0];
assign o_target_reg_a1_c3 [31:0]                           = target_reg_a1_c3 [31:0];
assign o_target_reg_a2_c3 [31:0]                           = target_reg_a2_c3 [31:0];
assign o_target_reg_b0_c3 [31:0]                           = target_reg_b0_c3 [31:0];
assign o_target_reg_b1_c3 [31:0]                           = target_reg_b1_c3 [31:0];
assign o_target_reg_b2_c3 [31:0]                           = target_reg_b2_c3 [31:0];
assign o_capture_reg_overflow_ctrl_c3 [5:0]                = capture_reg_overflow_ctrl_c3 [5:0];
assign o_switch_mode_onebit_cnts_c3 [15:0]                 = switch_mode_onebit_cnts_c3 [15:0];
assign o_waveform_mode_cnts_c3 [7:0]                       = waveform_mode_automatic_c3 [7:0];
assign o_capture_mode_cnts_c3 [7:0]                        = waveform_mode_automatic_c3 [15:8];
assign o_waveform_mode_automatic_sw_c3                     = waveform_mode_automatic_c3 [16];
assign o_capture_mode_automatic_sw_c3                      = waveform_mode_automatic_c3 [24];
assign o_shiftmode_ctrl_c3                                 = shiftmode_ctrl_c3 [0];
assign o_shiftout_data_ctrl_bitcnts_c3 [4:0]               = shiftout_data_ctrl_bitcnts_c3 [4:0];
assign o_shiftout_data_c3 [31:0]                           = shiftout_data_c3 [31:0];
assign o_shiftout_data_valid_c3                            = shiftout_data_valid_c3 [0];
assign o_shiftin_data_ctrl_bitcnts_c3 [4:0]                = shiftin_data_ctrl_bitcnts_c3 [4:0];

// *************************************************************
// ********* Block to reply to write requests ******************
// *************************************************************

always @*
case ( haddr_11w )
	`lcl_COUNTER_ALL_APB_REG_INTR_CLR_ADDR : one_hot_reg_wire = 110'b 1;
	`lcl_COUNTER_ALL_APB_REG_INTR_SET_ADDR : one_hot_reg_wire = 110'b 10;
	`lcl_COUNTER_ALL_APB_REG_INTR_MASK_SET_ADDR : one_hot_reg_wire = 110'b 100;
	`lcl_COUNTER_ALL_APB_REG_INTR_MASK_CLR_ADDR : one_hot_reg_wire = 110'b 1000;
	`lcl_COUNTER_ALL_APB_REG_INTR_SRESET_ADDR : one_hot_reg_wire = 110'b 1_0000;
	`lcl_COUNTER_ALL_APB_REG_GLOBAL_START_TRIGGER_ADDR : one_hot_reg_wire = 110'b 10_0000;
	`lcl_COUNTER_ALL_APB_REG_GLOBAL_STOP_TRIGGER_ADDR : one_hot_reg_wire = 110'b 100_0000;
	`lcl_COUNTER_ALL_APB_REG_GLOBAL_CLEAR_TRIGGER_ADDR : one_hot_reg_wire = 110'b 1000_0000;
	`lcl_COUNTER_ALL_APB_REG_GLOBAL_RESET_TRIGGER_ADDR : one_hot_reg_wire = 110'b 1_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C0_ADDR : one_hot_reg_wire = 110'b 10_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C0_ADDR : one_hot_reg_wire = 110'b 100_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C0_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C0_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_ENABLE_C0_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C0_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_MUX_SEL_C0_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C0_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C0_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_MODE_SEL_C0_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C0_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C0_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C0_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C0_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C0_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C0_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C0_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C0_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C0_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C0_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C0_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C0_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C0_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C0_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C0_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C1_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C1_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C1_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C1_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_ENABLE_C1_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C1_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_MUX_SEL_C1_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C1_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C1_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_MODE_SEL_C1_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C1_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C1_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C1_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C1_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C1_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C1_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C1_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C1_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C1_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C1_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C1_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C1_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C1_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C1_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C1_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C2_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C2_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C2_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C2_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_ENABLE_C2_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C2_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_MUX_SEL_C2_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C2_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C2_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_MODE_SEL_C2_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C2_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C2_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C2_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C2_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C2_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C2_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C2_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C2_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C2_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C2_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C2_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C2_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C2_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C2_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C2_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C3_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C3_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C3_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C3_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_ENABLE_C3_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C3_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_MUX_SEL_C3_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C3_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C3_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_MODE_SEL_C3_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C3_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C3_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C3_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C3_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C3_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C3_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C3_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C3_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C3_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C3_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C3_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C3_ADDR : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C3_ADDR : one_hot_reg_wire = 110'b 100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C3_ADDR : one_hot_reg_wire = 110'b 1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C3_ADDR : one_hot_reg_wire = 110'b 1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
	default                             : one_hot_reg_wire = 110'b 10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
endcase
always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		intr_clr                      <= `lcl_COUNTER_ALL_APB_REG_INTR_CLR_RST;
	else if ( one_hot_reg_wire[0] && hwen ) 
		intr_clr                      <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		intr_set                      <= `lcl_COUNTER_ALL_APB_REG_INTR_SET_RST;
	else if ( one_hot_reg_wire[1] && hwen ) 
		intr_set                      <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		intr_mask_set                 <= `lcl_COUNTER_ALL_APB_REG_INTR_MASK_SET_RST;
	else if ( one_hot_reg_wire[2] && hwen ) 
		intr_mask_set                 <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		intr_mask_clr                 <= `lcl_COUNTER_ALL_APB_REG_INTR_MASK_CLR_RST;
	else if ( one_hot_reg_wire[3] && hwen ) 
		intr_mask_clr                 <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		intr_sreset                   <= `lcl_COUNTER_ALL_APB_REG_INTR_SRESET_RST;
	else if ( one_hot_reg_wire[4] && hwen ) 
		intr_sreset                   <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		global_start_trigger          <= `lcl_COUNTER_ALL_APB_REG_GLOBAL_START_TRIGGER_RST;
	else if ( one_hot_reg_wire[5] && hwen ) 
		global_start_trigger          <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		global_stop_trigger           <= `lcl_COUNTER_ALL_APB_REG_GLOBAL_STOP_TRIGGER_RST;
	else if ( one_hot_reg_wire[6] && hwen ) 
		global_stop_trigger           <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		global_clear_trigger          <= `lcl_COUNTER_ALL_APB_REG_GLOBAL_CLEAR_TRIGGER_RST;
	else if ( one_hot_reg_wire[7] && hwen ) 
		global_clear_trigger          <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		global_reset_trigger          <= `lcl_COUNTER_ALL_APB_REG_GLOBAL_RESET_TRIGGER_RST;
	else if ( one_hot_reg_wire[8] && hwen ) 
		global_reset_trigger          <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_start_trigger_c0       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C0_RST;
	else if ( one_hot_reg_wire[9] && hwen ) 
		single_start_trigger_c0       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_stop_trigger_c0        <= `lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C0_RST;
	else if ( one_hot_reg_wire[10] && hwen ) 
		single_stop_trigger_c0        <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_clear_trigger_c0       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C0_RST;
	else if ( one_hot_reg_wire[11] && hwen ) 
		single_clear_trigger_c0       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_reset_trigger_c0       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C0_RST;
	else if ( one_hot_reg_wire[12] && hwen ) 
		single_reset_trigger_c0       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		enable_c0                     <= `lcl_COUNTER_ALL_APB_REG_ENABLE_C0_RST;
	else if ( one_hot_reg_wire[13] && hwen ) 
		enable_c0                     <= {hwdata_32w[15:8], 7'b 0, hwdata_32w[0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		soft_trigger_ctrl_c0          <= `lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C0_RST;
	else if ( one_hot_reg_wire[14] && hwen ) 
		soft_trigger_ctrl_c0          <= hwdata_32w[7:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		mux_sel_c0                    <= `lcl_COUNTER_ALL_APB_REG_MUX_SEL_C0_RST;
	else if ( one_hot_reg_wire[15] && hwen ) 
		mux_sel_c0                    <= hwdata_32w[3:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		src_sel_edge_c0               <= `lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C0_RST;
	else if ( one_hot_reg_wire[16] && hwen ) 
		src_sel_edge_c0               <= {hwdata_32w[29:24], 2'b 0, hwdata_32w[21:16], 2'b 0, hwdata_32w[13:8], 2'b 0, hwdata_32w[5:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		ctrl_snap_c0                  <= `lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C0_RST;
	else if ( one_hot_reg_wire[17] && hwen ) 
		ctrl_snap_c0                  <= {hwdata_32w[16], 12'b 0, hwdata_32w[3:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		mode_sel_c0                   <= `lcl_COUNTER_ALL_APB_REG_MODE_SEL_C0_RST;
	else if ( one_hot_reg_wire[18] && hwen ) 
		mode_sel_c0                   <= hwdata_32w[2:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_ctrl_c0            <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C0_RST;
	else if ( one_hot_reg_wire[19] && hwen ) 
		target_reg_ctrl_c0            <= hwdata_32w[5:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a0_c0              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C0_RST;
	else if ( one_hot_reg_wire[20] && hwen ) 
		target_reg_a0_c0              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a1_c0              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C0_RST;
	else if ( one_hot_reg_wire[21] && hwen ) 
		target_reg_a1_c0              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a2_c0              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C0_RST;
	else if ( one_hot_reg_wire[22] && hwen ) 
		target_reg_a2_c0              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b0_c0              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C0_RST;
	else if ( one_hot_reg_wire[23] && hwen ) 
		target_reg_b0_c0              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b1_c0              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C0_RST;
	else if ( one_hot_reg_wire[24] && hwen ) 
		target_reg_b1_c0              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b2_c0              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C0_RST;
	else if ( one_hot_reg_wire[25] && hwen ) 
		target_reg_b2_c0              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		capture_reg_overflow_ctrl_c0  <= `lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C0_RST;
	else if ( one_hot_reg_wire[26] && hwen ) 
		capture_reg_overflow_ctrl_c0  <= hwdata_32w[5:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		switch_mode_onebit_cnts_c0    <= `lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C0_RST;
	else if ( one_hot_reg_wire[27] && hwen ) 
		switch_mode_onebit_cnts_c0    <= hwdata_32w[15:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		waveform_mode_automatic_c0    <= `lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C0_RST;
	else if ( one_hot_reg_wire[28] && hwen ) 
		waveform_mode_automatic_c0    <= {hwdata_32w[24], 7'b 0, hwdata_32w[16:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftmode_ctrl_c0             <= `lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C0_RST;
	else if ( one_hot_reg_wire[29] && hwen ) 
		shiftmode_ctrl_c0             <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_ctrl_bitcnts_c0 <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C0_RST;
	else if ( one_hot_reg_wire[30] && hwen ) 
		shiftout_data_ctrl_bitcnts_c0 <= hwdata_32w[4:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_c0              <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C0_RST;
	else if ( one_hot_reg_wire[31] && hwen ) 
		shiftout_data_c0              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_valid_c0        <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C0_RST;
	else if ( one_hot_reg_wire[32] && hwen ) 
		shiftout_data_valid_c0        <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftin_data_ctrl_bitcnts_c0  <= `lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C0_RST;
	else if ( one_hot_reg_wire[33] && hwen ) 
		shiftin_data_ctrl_bitcnts_c0  <= hwdata_32w[4:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_start_trigger_c1       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C1_RST;
	else if ( one_hot_reg_wire[34] && hwen ) 
		single_start_trigger_c1       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_stop_trigger_c1        <= `lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C1_RST;
	else if ( one_hot_reg_wire[35] && hwen ) 
		single_stop_trigger_c1        <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_clear_trigger_c1       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C1_RST;
	else if ( one_hot_reg_wire[36] && hwen ) 
		single_clear_trigger_c1       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_reset_trigger_c1       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C1_RST;
	else if ( one_hot_reg_wire[37] && hwen ) 
		single_reset_trigger_c1       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		enable_c1                     <= `lcl_COUNTER_ALL_APB_REG_ENABLE_C1_RST;
	else if ( one_hot_reg_wire[38] && hwen ) 
		enable_c1                     <= {hwdata_32w[15:8], 7'b 0, hwdata_32w[0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		soft_trigger_ctrl_c1          <= `lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C1_RST;
	else if ( one_hot_reg_wire[39] && hwen ) 
		soft_trigger_ctrl_c1          <= hwdata_32w[7:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		mux_sel_c1                    <= `lcl_COUNTER_ALL_APB_REG_MUX_SEL_C1_RST;
	else if ( one_hot_reg_wire[40] && hwen ) 
		mux_sel_c1                    <= hwdata_32w[3:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		src_sel_edge_c1               <= `lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C1_RST;
	else if ( one_hot_reg_wire[41] && hwen ) 
		src_sel_edge_c1               <= {hwdata_32w[29:24], 2'b 0, hwdata_32w[21:16], 2'b 0, hwdata_32w[13:8], 2'b 0, hwdata_32w[5:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		ctrl_snap_c1                  <= `lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C1_RST;
	else if ( one_hot_reg_wire[42] && hwen ) 
		ctrl_snap_c1                  <= {hwdata_32w[16], 12'b 0, hwdata_32w[3:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		mode_sel_c1                   <= `lcl_COUNTER_ALL_APB_REG_MODE_SEL_C1_RST;
	else if ( one_hot_reg_wire[43] && hwen ) 
		mode_sel_c1                   <= hwdata_32w[2:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_ctrl_c1            <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C1_RST;
	else if ( one_hot_reg_wire[44] && hwen ) 
		target_reg_ctrl_c1            <= hwdata_32w[5:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a0_c1              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C1_RST;
	else if ( one_hot_reg_wire[45] && hwen ) 
		target_reg_a0_c1              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a1_c1              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C1_RST;
	else if ( one_hot_reg_wire[46] && hwen ) 
		target_reg_a1_c1              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a2_c1              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C1_RST;
	else if ( one_hot_reg_wire[47] && hwen ) 
		target_reg_a2_c1              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b0_c1              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C1_RST;
	else if ( one_hot_reg_wire[48] && hwen ) 
		target_reg_b0_c1              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b1_c1              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C1_RST;
	else if ( one_hot_reg_wire[49] && hwen ) 
		target_reg_b1_c1              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b2_c1              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C1_RST;
	else if ( one_hot_reg_wire[50] && hwen ) 
		target_reg_b2_c1              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		capture_reg_overflow_ctrl_c1  <= `lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C1_RST;
	else if ( one_hot_reg_wire[51] && hwen ) 
		capture_reg_overflow_ctrl_c1  <= hwdata_32w[5:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		switch_mode_onebit_cnts_c1    <= `lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C1_RST;
	else if ( one_hot_reg_wire[52] && hwen ) 
		switch_mode_onebit_cnts_c1    <= hwdata_32w[15:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		waveform_mode_automatic_c1    <= `lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C1_RST;
	else if ( one_hot_reg_wire[53] && hwen ) 
		waveform_mode_automatic_c1    <= {hwdata_32w[24], 7'b 0, hwdata_32w[16:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftmode_ctrl_c1             <= `lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C1_RST;
	else if ( one_hot_reg_wire[54] && hwen ) 
		shiftmode_ctrl_c1             <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_ctrl_bitcnts_c1 <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C1_RST;
	else if ( one_hot_reg_wire[55] && hwen ) 
		shiftout_data_ctrl_bitcnts_c1 <= hwdata_32w[4:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_c1              <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C1_RST;
	else if ( one_hot_reg_wire[56] && hwen ) 
		shiftout_data_c1              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_valid_c1        <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C1_RST;
	else if ( one_hot_reg_wire[57] && hwen ) 
		shiftout_data_valid_c1        <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftin_data_ctrl_bitcnts_c1  <= `lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C1_RST;
	else if ( one_hot_reg_wire[58] && hwen ) 
		shiftin_data_ctrl_bitcnts_c1  <= hwdata_32w[4:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_start_trigger_c2       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C2_RST;
	else if ( one_hot_reg_wire[59] && hwen ) 
		single_start_trigger_c2       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_stop_trigger_c2        <= `lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C2_RST;
	else if ( one_hot_reg_wire[60] && hwen ) 
		single_stop_trigger_c2        <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_clear_trigger_c2       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C2_RST;
	else if ( one_hot_reg_wire[61] && hwen ) 
		single_clear_trigger_c2       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_reset_trigger_c2       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C2_RST;
	else if ( one_hot_reg_wire[62] && hwen ) 
		single_reset_trigger_c2       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		enable_c2                     <= `lcl_COUNTER_ALL_APB_REG_ENABLE_C2_RST;
	else if ( one_hot_reg_wire[63] && hwen ) 
		enable_c2                     <= {hwdata_32w[15:8], 7'b 0, hwdata_32w[0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		soft_trigger_ctrl_c2          <= `lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C2_RST;
	else if ( one_hot_reg_wire[64] && hwen ) 
		soft_trigger_ctrl_c2          <= hwdata_32w[7:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		mux_sel_c2                    <= `lcl_COUNTER_ALL_APB_REG_MUX_SEL_C2_RST;
	else if ( one_hot_reg_wire[65] && hwen ) 
		mux_sel_c2                    <= hwdata_32w[3:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		src_sel_edge_c2               <= `lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C2_RST;
	else if ( one_hot_reg_wire[66] && hwen ) 
		src_sel_edge_c2               <= {hwdata_32w[29:24], 2'b 0, hwdata_32w[21:16], 2'b 0, hwdata_32w[13:8], 2'b 0, hwdata_32w[5:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		ctrl_snap_c2                  <= `lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C2_RST;
	else if ( one_hot_reg_wire[67] && hwen ) 
		ctrl_snap_c2                  <= {hwdata_32w[16], 12'b 0, hwdata_32w[3:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		mode_sel_c2                   <= `lcl_COUNTER_ALL_APB_REG_MODE_SEL_C2_RST;
	else if ( one_hot_reg_wire[68] && hwen ) 
		mode_sel_c2                   <= hwdata_32w[2:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_ctrl_c2            <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C2_RST;
	else if ( one_hot_reg_wire[69] && hwen ) 
		target_reg_ctrl_c2            <= hwdata_32w[5:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a0_c2              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C2_RST;
	else if ( one_hot_reg_wire[70] && hwen ) 
		target_reg_a0_c2              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a1_c2              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C2_RST;
	else if ( one_hot_reg_wire[71] && hwen ) 
		target_reg_a1_c2              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a2_c2              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C2_RST;
	else if ( one_hot_reg_wire[72] && hwen ) 
		target_reg_a2_c2              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b0_c2              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C2_RST;
	else if ( one_hot_reg_wire[73] && hwen ) 
		target_reg_b0_c2              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b1_c2              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C2_RST;
	else if ( one_hot_reg_wire[74] && hwen ) 
		target_reg_b1_c2              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b2_c2              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C2_RST;
	else if ( one_hot_reg_wire[75] && hwen ) 
		target_reg_b2_c2              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		capture_reg_overflow_ctrl_c2  <= `lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C2_RST;
	else if ( one_hot_reg_wire[76] && hwen ) 
		capture_reg_overflow_ctrl_c2  <= hwdata_32w[5:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		switch_mode_onebit_cnts_c2    <= `lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C2_RST;
	else if ( one_hot_reg_wire[77] && hwen ) 
		switch_mode_onebit_cnts_c2    <= hwdata_32w[15:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		waveform_mode_automatic_c2    <= `lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C2_RST;
	else if ( one_hot_reg_wire[78] && hwen ) 
		waveform_mode_automatic_c2    <= {hwdata_32w[24], 7'b 0, hwdata_32w[16:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftmode_ctrl_c2             <= `lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C2_RST;
	else if ( one_hot_reg_wire[79] && hwen ) 
		shiftmode_ctrl_c2             <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_ctrl_bitcnts_c2 <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C2_RST;
	else if ( one_hot_reg_wire[80] && hwen ) 
		shiftout_data_ctrl_bitcnts_c2 <= hwdata_32w[4:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_c2              <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C2_RST;
	else if ( one_hot_reg_wire[81] && hwen ) 
		shiftout_data_c2              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_valid_c2        <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C2_RST;
	else if ( one_hot_reg_wire[82] && hwen ) 
		shiftout_data_valid_c2        <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftin_data_ctrl_bitcnts_c2  <= `lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C2_RST;
	else if ( one_hot_reg_wire[83] && hwen ) 
		shiftin_data_ctrl_bitcnts_c2  <= hwdata_32w[4:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_start_trigger_c3       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C3_RST;
	else if ( one_hot_reg_wire[84] && hwen ) 
		single_start_trigger_c3       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_stop_trigger_c3        <= `lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C3_RST;
	else if ( one_hot_reg_wire[85] && hwen ) 
		single_stop_trigger_c3        <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_clear_trigger_c3       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C3_RST;
	else if ( one_hot_reg_wire[86] && hwen ) 
		single_clear_trigger_c3       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		single_reset_trigger_c3       <= `lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C3_RST;
	else if ( one_hot_reg_wire[87] && hwen ) 
		single_reset_trigger_c3       <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		enable_c3                     <= `lcl_COUNTER_ALL_APB_REG_ENABLE_C3_RST;
	else if ( one_hot_reg_wire[88] && hwen ) 
		enable_c3                     <= {hwdata_32w[15:8], 7'b 0, hwdata_32w[0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		soft_trigger_ctrl_c3          <= `lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C3_RST;
	else if ( one_hot_reg_wire[89] && hwen ) 
		soft_trigger_ctrl_c3          <= hwdata_32w[7:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		mux_sel_c3                    <= `lcl_COUNTER_ALL_APB_REG_MUX_SEL_C3_RST;
	else if ( one_hot_reg_wire[90] && hwen ) 
		mux_sel_c3                    <= hwdata_32w[3:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		src_sel_edge_c3               <= `lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C3_RST;
	else if ( one_hot_reg_wire[91] && hwen ) 
		src_sel_edge_c3               <= {hwdata_32w[29:24], 2'b 0, hwdata_32w[21:16], 2'b 0, hwdata_32w[13:8], 2'b 0, hwdata_32w[5:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		ctrl_snap_c3                  <= `lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C3_RST;
	else if ( one_hot_reg_wire[92] && hwen ) 
		ctrl_snap_c3                  <= {hwdata_32w[16], 12'b 0, hwdata_32w[3:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		mode_sel_c3                   <= `lcl_COUNTER_ALL_APB_REG_MODE_SEL_C3_RST;
	else if ( one_hot_reg_wire[93] && hwen ) 
		mode_sel_c3                   <= hwdata_32w[2:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_ctrl_c3            <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C3_RST;
	else if ( one_hot_reg_wire[94] && hwen ) 
		target_reg_ctrl_c3            <= hwdata_32w[5:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a0_c3              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C3_RST;
	else if ( one_hot_reg_wire[95] && hwen ) 
		target_reg_a0_c3              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a1_c3              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C3_RST;
	else if ( one_hot_reg_wire[96] && hwen ) 
		target_reg_a1_c3              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_a2_c3              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C3_RST;
	else if ( one_hot_reg_wire[97] && hwen ) 
		target_reg_a2_c3              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b0_c3              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C3_RST;
	else if ( one_hot_reg_wire[98] && hwen ) 
		target_reg_b0_c3              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b1_c3              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C3_RST;
	else if ( one_hot_reg_wire[99] && hwen ) 
		target_reg_b1_c3              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		target_reg_b2_c3              <= `lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C3_RST;
	else if ( one_hot_reg_wire[100] && hwen ) 
		target_reg_b2_c3              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		capture_reg_overflow_ctrl_c3  <= `lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C3_RST;
	else if ( one_hot_reg_wire[101] && hwen ) 
		capture_reg_overflow_ctrl_c3  <= hwdata_32w[5:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		switch_mode_onebit_cnts_c3    <= `lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C3_RST;
	else if ( one_hot_reg_wire[102] && hwen ) 
		switch_mode_onebit_cnts_c3    <= hwdata_32w[15:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		waveform_mode_automatic_c3    <= `lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C3_RST;
	else if ( one_hot_reg_wire[103] && hwen ) 
		waveform_mode_automatic_c3    <= {hwdata_32w[24], 7'b 0, hwdata_32w[16:0]};


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftmode_ctrl_c3             <= `lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C3_RST;
	else if ( one_hot_reg_wire[104] && hwen ) 
		shiftmode_ctrl_c3             <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_ctrl_bitcnts_c3 <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C3_RST;
	else if ( one_hot_reg_wire[105] && hwen ) 
		shiftout_data_ctrl_bitcnts_c3 <= hwdata_32w[4:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_c3              <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C3_RST;
	else if ( one_hot_reg_wire[106] && hwen ) 
		shiftout_data_c3              <= hwdata_32w[31:0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftout_data_valid_c3        <= `lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C3_RST;
	else if ( one_hot_reg_wire[107] && hwen ) 
		shiftout_data_valid_c3        <= hwdata_32w[0];


always @ ( posedge hclk or negedge hrst_n )
	if ( !hrst_n )
		shiftin_data_ctrl_bitcnts_c3  <= `lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C3_RST;
	else if ( one_hot_reg_wire[108] && hwen ) 
		shiftin_data_ctrl_bitcnts_c3  <= hwdata_32w[4:0];



// *************************************************************
// ********* Block to reply to read requests *******************
// *************************************************************

always @*
case ( haddr_11w )
	`lcl_COUNTER_ALL_APB_REG_INTR_STATUS_ADDR : hrdata_32w = sts_intr_status_counter;
	`lcl_COUNTER_ALL_APB_REG_INTR_MASK_STATUS_ADDR : hrdata_32w = sts_intr_mask_status_counter;
	`lcl_COUNTER_ALL_APB_REG_INTR_CLR_ADDR : hrdata_32w = intr_clr[31:0];
	`lcl_COUNTER_ALL_APB_REG_INTR_SET_ADDR : hrdata_32w = intr_set[31:0];
	`lcl_COUNTER_ALL_APB_REG_INTR_MASK_SET_ADDR : hrdata_32w = intr_mask_set[31:0];
	`lcl_COUNTER_ALL_APB_REG_INTR_MASK_CLR_ADDR : hrdata_32w = intr_mask_clr[31:0];
	`lcl_COUNTER_ALL_APB_REG_INTR_SRESET_ADDR : hrdata_32w = {31'b 0, intr_sreset[0]};
	`lcl_COUNTER_ALL_APB_REG_GLOBAL_START_TRIGGER_ADDR : hrdata_32w = {31'b 0, global_start_trigger[0]};
	`lcl_COUNTER_ALL_APB_REG_GLOBAL_STOP_TRIGGER_ADDR : hrdata_32w = {31'b 0, global_stop_trigger[0]};
	`lcl_COUNTER_ALL_APB_REG_GLOBAL_CLEAR_TRIGGER_ADDR : hrdata_32w = {31'b 0, global_clear_trigger[0]};
	`lcl_COUNTER_ALL_APB_REG_GLOBAL_RESET_TRIGGER_ADDR : hrdata_32w = {31'b 0, global_reset_trigger[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C0_ADDR : hrdata_32w = {31'b 0, single_start_trigger_c0[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C0_ADDR : hrdata_32w = {31'b 0, single_stop_trigger_c0[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C0_ADDR : hrdata_32w = {31'b 0, single_clear_trigger_c0[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C0_ADDR : hrdata_32w = {31'b 0, single_reset_trigger_c0[0]};
	`lcl_COUNTER_ALL_APB_REG_ENABLE_C0_ADDR : hrdata_32w = {16'b 0, enable_c0[15:8], 7'b 0, enable_c0[0]};
	`lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C0_ADDR : hrdata_32w = {24'b 0, soft_trigger_ctrl_c0[7:0]};
	`lcl_COUNTER_ALL_APB_REG_MUX_SEL_C0_ADDR : hrdata_32w = {28'b 0, mux_sel_c0[3:0]};
	`lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C0_ADDR : hrdata_32w = {2'b 0, src_sel_edge_c0[29:24], 2'b 0, src_sel_edge_c0[21:16], 2'b 0, src_sel_edge_c0[13:8], 2'b 0, src_sel_edge_c0[5:0]};
	`lcl_COUNTER_ALL_APB_REG_SNAP_STATUS_C0_ADDR : hrdata_32w = {28'b 0, i_snap_status_c0};
	`lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C0_ADDR : hrdata_32w = {15'b 0, ctrl_snap_c0[16], 12'b 0, ctrl_snap_c0[3:0]};
	`lcl_COUNTER_ALL_APB_REG_SHADOW_REG_C0_ADDR : hrdata_32w = i_shadow_reg_c0;
	`lcl_COUNTER_ALL_APB_REG_MODE_SEL_C0_ADDR : hrdata_32w = {29'b 0, mode_sel_c0[2:0]};
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C0_ADDR : hrdata_32w = {26'b 0, target_reg_ctrl_c0[5:0]};
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C0_ADDR : hrdata_32w = target_reg_a0_c0[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C0_ADDR : hrdata_32w = target_reg_a1_c0[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C0_ADDR : hrdata_32w = target_reg_a2_c0[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C0_ADDR : hrdata_32w = target_reg_b0_c0[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C0_ADDR : hrdata_32w = target_reg_b1_c0[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C0_ADDR : hrdata_32w = target_reg_b2_c0[31:0];
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_STATUS_C0_ADDR : hrdata_32w = {26'b 0, i_capture_reg_status_c0};
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C0_ADDR : hrdata_32w = {26'b 0, capture_reg_overflow_ctrl_c0[5:0]};
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A0_C0_ADDR : hrdata_32w = i_capture_reg_a0_c0;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A1_C0_ADDR : hrdata_32w = i_capture_reg_a1_c0;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A2_C0_ADDR : hrdata_32w = i_capture_reg_a2_c0;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B0_C0_ADDR : hrdata_32w = i_capture_reg_b0_c0;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B1_C0_ADDR : hrdata_32w = i_capture_reg_b1_c0;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B2_C0_ADDR : hrdata_32w = i_capture_reg_b2_c0;
	`lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C0_ADDR : hrdata_32w = {16'b 0, switch_mode_onebit_cnts_c0[15:0]};
	`lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C0_ADDR : hrdata_32w = {7'b 0, waveform_mode_automatic_c0[24], 7'b 0, waveform_mode_automatic_c0[16:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C0_ADDR : hrdata_32w = {31'b 0, shiftmode_ctrl_c0[0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C0_ADDR : hrdata_32w = {27'b 0, shiftout_data_ctrl_bitcnts_c0[4:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C0_ADDR : hrdata_32w = shiftout_data_c0[31:0];
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C0_ADDR : hrdata_32w = 32'b 0;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C0_ADDR : hrdata_32w = {27'b 0, shiftin_data_ctrl_bitcnts_c0[4:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_C0_ADDR : hrdata_32w = i_shiftin_data_c0;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATABITS_UPDATED_C0_ADDR : hrdata_32w = i_shiftin_databits_updated_c0;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C1_ADDR : hrdata_32w = {31'b 0, single_start_trigger_c1[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C1_ADDR : hrdata_32w = {31'b 0, single_stop_trigger_c1[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C1_ADDR : hrdata_32w = {31'b 0, single_clear_trigger_c1[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C1_ADDR : hrdata_32w = {31'b 0, single_reset_trigger_c1[0]};
	`lcl_COUNTER_ALL_APB_REG_ENABLE_C1_ADDR : hrdata_32w = {16'b 0, enable_c1[15:8], 7'b 0, enable_c1[0]};
	`lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C1_ADDR : hrdata_32w = {24'b 0, soft_trigger_ctrl_c1[7:0]};
	`lcl_COUNTER_ALL_APB_REG_MUX_SEL_C1_ADDR : hrdata_32w = {28'b 0, mux_sel_c1[3:0]};
	`lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C1_ADDR : hrdata_32w = {2'b 0, src_sel_edge_c1[29:24], 2'b 0, src_sel_edge_c1[21:16], 2'b 0, src_sel_edge_c1[13:8], 2'b 0, src_sel_edge_c1[5:0]};
	`lcl_COUNTER_ALL_APB_REG_SNAP_STATUS_C1_ADDR : hrdata_32w = {28'b 0, i_snap_status_c1};
	`lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C1_ADDR : hrdata_32w = {15'b 0, ctrl_snap_c1[16], 12'b 0, ctrl_snap_c1[3:0]};
	`lcl_COUNTER_ALL_APB_REG_SHADOW_REG_C1_ADDR : hrdata_32w = i_shadow_reg_c1;
	`lcl_COUNTER_ALL_APB_REG_MODE_SEL_C1_ADDR : hrdata_32w = {29'b 0, mode_sel_c1[2:0]};
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C1_ADDR : hrdata_32w = {26'b 0, target_reg_ctrl_c1[5:0]};
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C1_ADDR : hrdata_32w = target_reg_a0_c1[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C1_ADDR : hrdata_32w = target_reg_a1_c1[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C1_ADDR : hrdata_32w = target_reg_a2_c1[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C1_ADDR : hrdata_32w = target_reg_b0_c1[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C1_ADDR : hrdata_32w = target_reg_b1_c1[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C1_ADDR : hrdata_32w = target_reg_b2_c1[31:0];
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_STATUS_C1_ADDR : hrdata_32w = {26'b 0, i_capture_reg_status_c1};
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C1_ADDR : hrdata_32w = {26'b 0, capture_reg_overflow_ctrl_c1[5:0]};
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A0_C1_ADDR : hrdata_32w = i_capture_reg_a0_c1;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A1_C1_ADDR : hrdata_32w = i_capture_reg_a1_c1;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A2_C1_ADDR : hrdata_32w = i_capture_reg_a2_c1;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B0_C1_ADDR : hrdata_32w = i_capture_reg_b0_c1;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B1_C1_ADDR : hrdata_32w = i_capture_reg_b1_c1;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B2_C1_ADDR : hrdata_32w = i_capture_reg_b2_c1;
	`lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C1_ADDR : hrdata_32w = {16'b 0, switch_mode_onebit_cnts_c1[15:0]};
	`lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C1_ADDR : hrdata_32w = {7'b 0, waveform_mode_automatic_c1[24], 7'b 0, waveform_mode_automatic_c1[16:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C1_ADDR : hrdata_32w = {31'b 0, shiftmode_ctrl_c1[0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C1_ADDR : hrdata_32w = {27'b 0, shiftout_data_ctrl_bitcnts_c1[4:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C1_ADDR : hrdata_32w = shiftout_data_c1[31:0];
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C1_ADDR : hrdata_32w = 32'b 0;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C1_ADDR : hrdata_32w = {27'b 0, shiftin_data_ctrl_bitcnts_c1[4:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_C1_ADDR : hrdata_32w = i_shiftin_data_c1;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATABITS_UPDATED_C1_ADDR : hrdata_32w = i_shiftin_databits_updated_c1;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C2_ADDR : hrdata_32w = {31'b 0, single_start_trigger_c2[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C2_ADDR : hrdata_32w = {31'b 0, single_stop_trigger_c2[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C2_ADDR : hrdata_32w = {31'b 0, single_clear_trigger_c2[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C2_ADDR : hrdata_32w = {31'b 0, single_reset_trigger_c2[0]};
	`lcl_COUNTER_ALL_APB_REG_ENABLE_C2_ADDR : hrdata_32w = {16'b 0, enable_c2[15:8], 7'b 0, enable_c2[0]};
	`lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C2_ADDR : hrdata_32w = {24'b 0, soft_trigger_ctrl_c2[7:0]};
	`lcl_COUNTER_ALL_APB_REG_MUX_SEL_C2_ADDR : hrdata_32w = {28'b 0, mux_sel_c2[3:0]};
	`lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C2_ADDR : hrdata_32w = {2'b 0, src_sel_edge_c2[29:24], 2'b 0, src_sel_edge_c2[21:16], 2'b 0, src_sel_edge_c2[13:8], 2'b 0, src_sel_edge_c2[5:0]};
	`lcl_COUNTER_ALL_APB_REG_SNAP_STATUS_C2_ADDR : hrdata_32w = {28'b 0, i_snap_status_c2};
	`lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C2_ADDR : hrdata_32w = {15'b 0, ctrl_snap_c2[16], 12'b 0, ctrl_snap_c2[3:0]};
	`lcl_COUNTER_ALL_APB_REG_SHADOW_REG_C2_ADDR : hrdata_32w = i_shadow_reg_c2;
	`lcl_COUNTER_ALL_APB_REG_MODE_SEL_C2_ADDR : hrdata_32w = {29'b 0, mode_sel_c2[2:0]};
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C2_ADDR : hrdata_32w = {26'b 0, target_reg_ctrl_c2[5:0]};
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C2_ADDR : hrdata_32w = target_reg_a0_c2[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C2_ADDR : hrdata_32w = target_reg_a1_c2[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C2_ADDR : hrdata_32w = target_reg_a2_c2[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C2_ADDR : hrdata_32w = target_reg_b0_c2[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C2_ADDR : hrdata_32w = target_reg_b1_c2[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C2_ADDR : hrdata_32w = target_reg_b2_c2[31:0];
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_STATUS_C2_ADDR : hrdata_32w = {26'b 0, i_capture_reg_status_c2};
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C2_ADDR : hrdata_32w = {26'b 0, capture_reg_overflow_ctrl_c2[5:0]};
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A0_C2_ADDR : hrdata_32w = i_capture_reg_a0_c2;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A1_C2_ADDR : hrdata_32w = i_capture_reg_a1_c2;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A2_C2_ADDR : hrdata_32w = i_capture_reg_a2_c2;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B0_C2_ADDR : hrdata_32w = i_capture_reg_b0_c2;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B1_C2_ADDR : hrdata_32w = i_capture_reg_b1_c2;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B2_C2_ADDR : hrdata_32w = i_capture_reg_b2_c2;
	`lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C2_ADDR : hrdata_32w = {16'b 0, switch_mode_onebit_cnts_c2[15:0]};
	`lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C2_ADDR : hrdata_32w = {7'b 0, waveform_mode_automatic_c2[24], 7'b 0, waveform_mode_automatic_c2[16:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C2_ADDR : hrdata_32w = {31'b 0, shiftmode_ctrl_c2[0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C2_ADDR : hrdata_32w = {27'b 0, shiftout_data_ctrl_bitcnts_c2[4:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C2_ADDR : hrdata_32w = shiftout_data_c2[31:0];
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C2_ADDR : hrdata_32w = 32'b 0;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C2_ADDR : hrdata_32w = {27'b 0, shiftin_data_ctrl_bitcnts_c2[4:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_C2_ADDR : hrdata_32w = i_shiftin_data_c2;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATABITS_UPDATED_C2_ADDR : hrdata_32w = i_shiftin_databits_updated_c2;
	`lcl_COUNTER_ALL_APB_REG_SINGLE_START_TRIGGER_C3_ADDR : hrdata_32w = {31'b 0, single_start_trigger_c3[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_STOP_TRIGGER_C3_ADDR : hrdata_32w = {31'b 0, single_stop_trigger_c3[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_CLEAR_TRIGGER_C3_ADDR : hrdata_32w = {31'b 0, single_clear_trigger_c3[0]};
	`lcl_COUNTER_ALL_APB_REG_SINGLE_RESET_TRIGGER_C3_ADDR : hrdata_32w = {31'b 0, single_reset_trigger_c3[0]};
	`lcl_COUNTER_ALL_APB_REG_ENABLE_C3_ADDR : hrdata_32w = {16'b 0, enable_c3[15:8], 7'b 0, enable_c3[0]};
	`lcl_COUNTER_ALL_APB_REG_SOFT_TRIGGER_CTRL_C3_ADDR : hrdata_32w = {24'b 0, soft_trigger_ctrl_c3[7:0]};
	`lcl_COUNTER_ALL_APB_REG_MUX_SEL_C3_ADDR : hrdata_32w = {28'b 0, mux_sel_c3[3:0]};
	`lcl_COUNTER_ALL_APB_REG_SRC_SEL_EDGE_C3_ADDR : hrdata_32w = {2'b 0, src_sel_edge_c3[29:24], 2'b 0, src_sel_edge_c3[21:16], 2'b 0, src_sel_edge_c3[13:8], 2'b 0, src_sel_edge_c3[5:0]};
	`lcl_COUNTER_ALL_APB_REG_SNAP_STATUS_C3_ADDR : hrdata_32w = {28'b 0, i_snap_status_c3};
	`lcl_COUNTER_ALL_APB_REG_CTRL_SNAP_C3_ADDR : hrdata_32w = {15'b 0, ctrl_snap_c3[16], 12'b 0, ctrl_snap_c3[3:0]};
	`lcl_COUNTER_ALL_APB_REG_SHADOW_REG_C3_ADDR : hrdata_32w = i_shadow_reg_c3;
	`lcl_COUNTER_ALL_APB_REG_MODE_SEL_C3_ADDR : hrdata_32w = {29'b 0, mode_sel_c3[2:0]};
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_CTRL_C3_ADDR : hrdata_32w = {26'b 0, target_reg_ctrl_c3[5:0]};
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A0_C3_ADDR : hrdata_32w = target_reg_a0_c3[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A1_C3_ADDR : hrdata_32w = target_reg_a1_c3[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_A2_C3_ADDR : hrdata_32w = target_reg_a2_c3[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B0_C3_ADDR : hrdata_32w = target_reg_b0_c3[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B1_C3_ADDR : hrdata_32w = target_reg_b1_c3[31:0];
	`lcl_COUNTER_ALL_APB_REG_TARGET_REG_B2_C3_ADDR : hrdata_32w = target_reg_b2_c3[31:0];
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_STATUS_C3_ADDR : hrdata_32w = {26'b 0, i_capture_reg_status_c3};
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_OVERFLOW_CTRL_C3_ADDR : hrdata_32w = {26'b 0, capture_reg_overflow_ctrl_c3[5:0]};
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A0_C3_ADDR : hrdata_32w = i_capture_reg_a0_c3;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A1_C3_ADDR : hrdata_32w = i_capture_reg_a1_c3;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_A2_C3_ADDR : hrdata_32w = i_capture_reg_a2_c3;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B0_C3_ADDR : hrdata_32w = i_capture_reg_b0_c3;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B1_C3_ADDR : hrdata_32w = i_capture_reg_b1_c3;
	`lcl_COUNTER_ALL_APB_REG_CAPTURE_REG_B2_C3_ADDR : hrdata_32w = i_capture_reg_b2_c3;
	`lcl_COUNTER_ALL_APB_REG_SWITCH_MODE_ONEBIT_CNTS_C3_ADDR : hrdata_32w = {16'b 0, switch_mode_onebit_cnts_c3[15:0]};
	`lcl_COUNTER_ALL_APB_REG_WAVEFORM_MODE_AUTOMATIC_C3_ADDR : hrdata_32w = {7'b 0, waveform_mode_automatic_c3[24], 7'b 0, waveform_mode_automatic_c3[16:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTMODE_CTRL_C3_ADDR : hrdata_32w = {31'b 0, shiftmode_ctrl_c3[0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_CTRL_BITCNTS_C3_ADDR : hrdata_32w = {27'b 0, shiftout_data_ctrl_bitcnts_c3[4:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_C3_ADDR : hrdata_32w = shiftout_data_c3[31:0];
	`lcl_COUNTER_ALL_APB_REG_SHIFTOUT_DATA_VALID_C3_ADDR : hrdata_32w = 32'b 0;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_CTRL_BITCNTS_C3_ADDR : hrdata_32w = {27'b 0, shiftin_data_ctrl_bitcnts_c3[4:0]};
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATA_C3_ADDR : hrdata_32w = i_shiftin_data_c3;
	`lcl_COUNTER_ALL_APB_REG_SHIFTIN_DATABITS_UPDATED_C3_ADDR : hrdata_32w = i_shiftin_databits_updated_c3;
	default                              : hrdata_32w = 32'b 0;
endcase

// ********************************************************
// ********* Create Write Enable Pulses *******************
// ********************************************************

assign wen_intr_clr = (haddr_11w == 2) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_intr_clr_d <= 1'b0;
  else         wen_intr_clr_d <= wen_intr_clr;
end
assign wen_intr_set = (haddr_11w == 3) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_intr_set_d <= 1'b0;
  else         wen_intr_set_d <= wen_intr_set;
end
assign wen_intr_mask_set = (haddr_11w == 4) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_intr_mask_set_d <= 1'b0;
  else         wen_intr_mask_set_d <= wen_intr_mask_set;
end
assign wen_intr_mask_clr = (haddr_11w == 5) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_intr_mask_clr_d <= 1'b0;
  else         wen_intr_mask_clr_d <= wen_intr_mask_clr;
end
assign wen_ctrl_snap_c0 = (haddr_11w == 41) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_ctrl_snap_c0_d <= 1'b0;
  else         wen_ctrl_snap_c0_d <= wen_ctrl_snap_c0;
end
assign wen_target_reg_a1_c0 = (haddr_11w == 46) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_target_reg_a1_c0_d <= 1'b0;
  else         wen_target_reg_a1_c0_d <= wen_target_reg_a1_c0;
end
assign wen_shiftout_data_valid_c0 = (haddr_11w == 65) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_shiftout_data_valid_c0_d <= 1'b0;
  else         wen_shiftout_data_valid_c0_d <= wen_shiftout_data_valid_c0;
end
assign wen_ctrl_snap_c1 = (haddr_11w == 105) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_ctrl_snap_c1_d <= 1'b0;
  else         wen_ctrl_snap_c1_d <= wen_ctrl_snap_c1;
end
assign wen_target_reg_a1_c1 = (haddr_11w == 110) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_target_reg_a1_c1_d <= 1'b0;
  else         wen_target_reg_a1_c1_d <= wen_target_reg_a1_c1;
end
assign wen_shiftout_data_valid_c1 = (haddr_11w == 129) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_shiftout_data_valid_c1_d <= 1'b0;
  else         wen_shiftout_data_valid_c1_d <= wen_shiftout_data_valid_c1;
end
assign wen_ctrl_snap_c2 = (haddr_11w == 169) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_ctrl_snap_c2_d <= 1'b0;
  else         wen_ctrl_snap_c2_d <= wen_ctrl_snap_c2;
end
assign wen_target_reg_a1_c2 = (haddr_11w == 174) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_target_reg_a1_c2_d <= 1'b0;
  else         wen_target_reg_a1_c2_d <= wen_target_reg_a1_c2;
end
assign wen_shiftout_data_valid_c2 = (haddr_11w == 193) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_shiftout_data_valid_c2_d <= 1'b0;
  else         wen_shiftout_data_valid_c2_d <= wen_shiftout_data_valid_c2;
end
assign wen_ctrl_snap_c3 = (haddr_11w == 233) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_ctrl_snap_c3_d <= 1'b0;
  else         wen_ctrl_snap_c3_d <= wen_ctrl_snap_c3;
end
assign wen_target_reg_a1_c3 = (haddr_11w == 238) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_target_reg_a1_c3_d <= 1'b0;
  else         wen_target_reg_a1_c3_d <= wen_target_reg_a1_c3;
end
assign wen_shiftout_data_valid_c3 = (haddr_11w == 257) ? hwen : 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) wen_shiftout_data_valid_c3_d <= 1'b0;
  else         wen_shiftout_data_valid_c3_d <= wen_shiftout_data_valid_c3;
end

// ********************************************************
// ********* Create Read Enable Pulses *******************
// ********************************************************

assign ren_snap_status_c0 = (haddr_11w == 40) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_snap_status_c0_d <= 1'b0;
  else         ren_snap_status_c0_d <= ren_snap_status_c0;
end
assign ren_capture_reg_a0_c0 = (haddr_11w == 54) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a0_c0_d <= 1'b0;
  else         ren_capture_reg_a0_c0_d <= ren_capture_reg_a0_c0;
end
assign ren_capture_reg_a1_c0 = (haddr_11w == 55) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a1_c0_d <= 1'b0;
  else         ren_capture_reg_a1_c0_d <= ren_capture_reg_a1_c0;
end
assign ren_capture_reg_a2_c0 = (haddr_11w == 56) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a2_c0_d <= 1'b0;
  else         ren_capture_reg_a2_c0_d <= ren_capture_reg_a2_c0;
end
assign ren_capture_reg_b0_c0 = (haddr_11w == 57) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b0_c0_d <= 1'b0;
  else         ren_capture_reg_b0_c0_d <= ren_capture_reg_b0_c0;
end
assign ren_capture_reg_b1_c0 = (haddr_11w == 58) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b1_c0_d <= 1'b0;
  else         ren_capture_reg_b1_c0_d <= ren_capture_reg_b1_c0;
end
assign ren_capture_reg_b2_c0 = (haddr_11w == 59) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b2_c0_d <= 1'b0;
  else         ren_capture_reg_b2_c0_d <= ren_capture_reg_b2_c0;
end
assign ren_snap_status_c1 = (haddr_11w == 104) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_snap_status_c1_d <= 1'b0;
  else         ren_snap_status_c1_d <= ren_snap_status_c1;
end
assign ren_capture_reg_a0_c1 = (haddr_11w == 118) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a0_c1_d <= 1'b0;
  else         ren_capture_reg_a0_c1_d <= ren_capture_reg_a0_c1;
end
assign ren_capture_reg_a1_c1 = (haddr_11w == 119) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a1_c1_d <= 1'b0;
  else         ren_capture_reg_a1_c1_d <= ren_capture_reg_a1_c1;
end
assign ren_capture_reg_a2_c1 = (haddr_11w == 120) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a2_c1_d <= 1'b0;
  else         ren_capture_reg_a2_c1_d <= ren_capture_reg_a2_c1;
end
assign ren_capture_reg_b0_c1 = (haddr_11w == 121) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b0_c1_d <= 1'b0;
  else         ren_capture_reg_b0_c1_d <= ren_capture_reg_b0_c1;
end
assign ren_capture_reg_b1_c1 = (haddr_11w == 122) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b1_c1_d <= 1'b0;
  else         ren_capture_reg_b1_c1_d <= ren_capture_reg_b1_c1;
end
assign ren_capture_reg_b2_c1 = (haddr_11w == 123) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b2_c1_d <= 1'b0;
  else         ren_capture_reg_b2_c1_d <= ren_capture_reg_b2_c1;
end
assign ren_snap_status_c2 = (haddr_11w == 168) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_snap_status_c2_d <= 1'b0;
  else         ren_snap_status_c2_d <= ren_snap_status_c2;
end
assign ren_capture_reg_a0_c2 = (haddr_11w == 182) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a0_c2_d <= 1'b0;
  else         ren_capture_reg_a0_c2_d <= ren_capture_reg_a0_c2;
end
assign ren_capture_reg_a1_c2 = (haddr_11w == 183) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a1_c2_d <= 1'b0;
  else         ren_capture_reg_a1_c2_d <= ren_capture_reg_a1_c2;
end
assign ren_capture_reg_a2_c2 = (haddr_11w == 184) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a2_c2_d <= 1'b0;
  else         ren_capture_reg_a2_c2_d <= ren_capture_reg_a2_c2;
end
assign ren_capture_reg_b0_c2 = (haddr_11w == 185) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b0_c2_d <= 1'b0;
  else         ren_capture_reg_b0_c2_d <= ren_capture_reg_b0_c2;
end
assign ren_capture_reg_b1_c2 = (haddr_11w == 186) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b1_c2_d <= 1'b0;
  else         ren_capture_reg_b1_c2_d <= ren_capture_reg_b1_c2;
end
assign ren_capture_reg_b2_c2 = (haddr_11w == 187) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b2_c2_d <= 1'b0;
  else         ren_capture_reg_b2_c2_d <= ren_capture_reg_b2_c2;
end
assign ren_snap_status_c3 = (haddr_11w == 232) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_snap_status_c3_d <= 1'b0;
  else         ren_snap_status_c3_d <= ren_snap_status_c3;
end
assign ren_capture_reg_a0_c3 = (haddr_11w == 246) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a0_c3_d <= 1'b0;
  else         ren_capture_reg_a0_c3_d <= ren_capture_reg_a0_c3;
end
assign ren_capture_reg_a1_c3 = (haddr_11w == 247) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a1_c3_d <= 1'b0;
  else         ren_capture_reg_a1_c3_d <= ren_capture_reg_a1_c3;
end
assign ren_capture_reg_a2_c3 = (haddr_11w == 248) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_a2_c3_d <= 1'b0;
  else         ren_capture_reg_a2_c3_d <= ren_capture_reg_a2_c3;
end
assign ren_capture_reg_b0_c3 = (haddr_11w == 249) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b0_c3_d <= 1'b0;
  else         ren_capture_reg_b0_c3_d <= ren_capture_reg_b0_c3;
end
assign ren_capture_reg_b1_c3 = (haddr_11w == 250) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b1_c3_d <= 1'b0;
  else         ren_capture_reg_b1_c3_d <= ren_capture_reg_b1_c3;
end
assign ren_capture_reg_b2_c3 = (haddr_11w == 251) ? (~hwen & hren): 1'b0;
always @ (posedge hclk or negedge hrst_n) begin
  if (~hrst_n) ren_capture_reg_b2_c3_d <= 1'b0;
  else         ren_capture_reg_b2_c3_d <= ren_capture_reg_b2_c3;
end


endmodule



////////////////////////////////////////////////////////////////////////////////////////
//
//  $Log: counter_all_apb_reg.v,v $
<<<<<<< HEAD
//  Revision 1.0  5/2/2018 2:24:50  register_slave.pl
=======
//  Revision 1.0  5/15/2018 0:29:53  register_slave.pl
>>>>>>> tmp
//  Initial rev
//
//
////////////////////////////////////////////////////////////////////////////////////////
