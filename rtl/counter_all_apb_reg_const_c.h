/////////////////////////////////////////////////////////////////////////////////
// This file has been automatically generated by register_slave.pl version 73bb090
/////////////////////////////////////////////////////////////////////////////////

// type declaration
#ifndef __REG_CONST_T
#define __REG_CONST_T

#ifndef REG_CONST_NAME_STRING_MAX_LEN   
#define REG_CONST_NAME_STRING_MAX_LEN 64
#endif // REG_CONST_NAME_STRING_MAX_LEN
#ifndef REG_CONST_DESC_STRING_MAX_LEN
#define REG_CONST_DESC_STRING_MAX_LEN 512
#endif // REG_CONST_DESC_STRING_MAX_LEN
typedef struct {
	char name[REG_CONST_NAME_STRING_MAX_LEN];
	DWORD address;
	DWORD def;
	char desc[REG_CONST_DESC_STRING_MAX_LEN];
} reg_const_t;
typedef struct {
	char name[REG_CONST_NAME_STRING_MAX_LEN];
	char range[32];
	char def[32];
	char access[32];
	char desc[REG_CONST_DESC_STRING_MAX_LEN];
} field_const_t;
typedef struct {
	field_const_t *pfield;
	DWORD size;
} field_const_array_t;
#endif // __REG_CONST_T

#define NUM_REGS__COUNTER_ALL_APB_REG  178
/* { reg_const_counter_all_apb_reg, 178, "counter_all_apb_reg"},  */ 
static reg_const_t reg_const_counter_all_apb_reg[NUM_REGS__COUNTER_ALL_APB_REG] = {
  {/* name */ "intr_status", /* address */ 0x44120000, /* default */ 0x00000000, /* description */ "Interrupt status register bits. \n"}, 
  {/* name */ "intr_mask_status", /* address */ 0x44120004, /* default */ 0x00000001, /* description */ "Interrupt mask status register\n"}, 
  {/* name */ "intr_clr", /* address */ 0x44120008, /* default */ 0x00000000, /* description */ "Clear interrupt status\n"}, 
  {/* name */ "intr_set", /* address */ 0x4412000c, /* default */ 0x00000000, /* description */ "Set interrupt status\n"}, 
  {/* name */ "intr_mask_set", /* address */ 0x44120010, /* default */ 0x00000000, /* description */ "Set interrupt mask\n"}, 
  {/* name */ "intr_mask_clr", /* address */ 0x44120014, /* default */ 0x00000000, /* description */ "Set interrupt mask\n"}, 
  {/* name */ "intr_sreset", /* address */ 0x44120018, /* default */ 0x00000000, /* description */ "interrupt softward reset\n"}, 
  {/* name */ "global_start_trigger", /* address */ 0x44120040, /* default */ 0x00000000, /* description */ "global trigger register bits. \n"}, 
  {/* name */ "global_stop_trigger", /* address */ 0x44120044, /* default */ 0x00000000, /* description */ "global trigger register bits. \n"}, 
  {/* name */ "global_clear_trigger", /* address */ 0x44120048, /* default */ 0x00000000, /* description */ "global trigger register bits. \n"}, 
  {/* name */ "global_reset_trigger", /* address */ 0x4412004c, /* default */ 0x00000000, /* description */ "global trigger register bits. \n"}, 
  {/* name */ "din_mux_sel", /* address */ 0x44120050, /* default */ 0x76543210, /* description */ "din pin mux select. \n"}, 
  {/* name */ "dout_mux_sel", /* address */ 0x44120054, /* default */ 0x76543210, /* description */ "dout pin mux select. \n"}, 
  {/* name */ "dout_enable_ctrl", /* address */ 0x44120058, /* default */ 0x11111111, /* description */ "dout pin output enable control. \n"}, 
  {/* name */ "single_start_trigger_c0", /* address */ 0x44120080, /* default */ 0x00000000, /* description */ "counter 0 single trigger register bits. \n"}, 
  {/* name */ "single_stop_trigger_c0", /* address */ 0x44120084, /* default */ 0x00000000, /* description */ "counter 0 single trigger register bits. \n"}, 
  {/* name */ "single_clear_trigger_c0", /* address */ 0x44120088, /* default */ 0x00000000, /* description */ "counter 0 single trigger register bits. \n"}, 
  {/* name */ "single_reset_trigger_c0", /* address */ 0x4412008c, /* default */ 0x00000000, /* description */ "counter 0 single trigger register bits. \n"}, 
  {/* name */ "enable_c0", /* address */ 0x44120090, /* default */ 0x00000000, /* description */ "counter 0 enable_c0 signal. \n"}, 
  {/* name */ "soft_trigger_ctrl_c0", /* address */ 0x44120094, /* default */ 0x00000000, /* description */ "control the function of single/global_trigger. \n"}, 
  {/* name */ "mux_sel_c0", /* address */ 0x44120098, /* default */ 0x00000000, /* description */ "select counter 0 inner input data from other counters. \n"}, 
  {/* name */ "src_sel_edge_c0", /* address */ 0x4412009c, /* default */ 0x00000000, /* description */ "select the valid input and edge for start/stop/din0/din1. \n"}, 
  {/* name */ "snap_status_c0", /* address */ 0x441200a0, /* default */ 0x00000000, /* description */ "the status of snapping the status or data from counter 0  \n"}, 
  {/* name */ "ctrl_snap_c0", /* address */ 0x441200a4, /* default */ 0x00000000, /* description */ "snap the status or data from counter 0. \n"}, 
  {/* name */ "shadow_reg_c0", /* address */ 0x441200a8, /* default */ 0x00000000, /* description */ "snap the current value from counter. \n"}, 
  {/* name */ "mode_sel_c0", /* address */ 0x441200ac, /* default */ 0x00000000, /* description */ "working mode select for counter 0. \n"}, 
  {/* name */ "target_reg_ctrl_c0", /* address */ 0x441200b0, /* default */ 0x00000000, /* description */ "waveform mode control from counter 0. \n"}, 
  {/* name */ "target_reg_a0_c0", /* address */ 0x441200b4, /* default */ 0x00000000, /* description */ "waveform mode , target register a0, for counter 0. \n"}, 
  {/* name */ "target_reg_a1_c0", /* address */ 0x441200b8, /* default */ 0x00000000, /* description */ "waveform mode , target register a0, for counter 0. \n"}, 
  {/* name */ "target_reg_a2_c0", /* address */ 0x441200bc, /* default */ 0x00000000, /* description */ "waveform mode , target register a2, for counter 0. \n"}, 
  {/* name */ "target_reg_b0_c0", /* address */ 0x441200c0, /* default */ 0x00000000, /* description */ "waveform mode , target register b0, for counter 0. \n"}, 
  {/* name */ "target_reg_b1_c0", /* address */ 0x441200c4, /* default */ 0x00000000, /* description */ "waveform mode , target register b1, for counter 0. \n"}, 
  {/* name */ "target_reg_b2_c0", /* address */ 0x441200c8, /* default */ 0x00000000, /* description */ "waveform mode , target register b2, for counter 0. \n"}, 
  {/* name */ "capture_reg_status_c0", /* address */ 0x441200cc, /* default */ 0x00000000, /* description */ "capture mode , snap the status from counter 0. \n"}, 
  {/* name */ "capture_reg_overflow_ctrl_c0", /* address */ 0x441200d0, /* default */ 0x00000000, /* description */ "capture mode , when overflow ,discard or rewrite. \n"}, 
  {/* name */ "capture_reg_a0_c0", /* address */ 0x441200d8, /* default */ 0x00000000, /* description */ "capture mode, capture register a0 for counter 0. \n"}, 
  {/* name */ "capture_reg_a1_c0", /* address */ 0x441200dc, /* default */ 0x00000000, /* description */ "capture mode, capture register a1 for counter 0. \n"}, 
  {/* name */ "capture_reg_a2_c0", /* address */ 0x441200e0, /* default */ 0x00000000, /* description */ "capture mode, capture register a2 for counter 0. \n"}, 
  {/* name */ "capture_reg_b0_c0", /* address */ 0x441200e4, /* default */ 0x00000000, /* description */ "capture mode, capture register b0 for counter 0. \n"}, 
  {/* name */ "capture_reg_b1_c0", /* address */ 0x441200e8, /* default */ 0x00000000, /* description */ "capture mode, capture register b1 for counter 0. \n"}, 
  {/* name */ "capture_reg_b2_c0", /* address */ 0x441200ec, /* default */ 0x00000000, /* description */ "capture mode, capture register b2 for counter 0. \n"}, 
  {/* name */ "switch_mode_onebit_cnts_c0", /* address */ 0x441200f0, /* default */ 0x00000000, /* description */ "waveform and capture switch mode, one bit data means counter value. for counter 0.\n"}, 
  {/* name */ "waveform_mode_automatic_c0", /* address */ 0x441200f4, /* default */ 0x00000000, /* description */ "automatic waveform and capture switch mode,for counter 0. \n"}, 
  {/* name */ "shiftmode_ctrl_c0", /* address */ 0x441200f8, /* default */ 0x00000000, /* description */ "select bus_a or bus_b in shiftin/shiftout mode. \n"}, 
  {/* name */ "shiftout_data_ctrl_bitcnts_c0", /* address */ 0x441200fc, /* default */ 0x00000000, /* description */ "how man bits to shift out data from counter 0. \n"}, 
  {/* name */ "shiftout_data_c0", /* address */ 0x44120100, /* default */ 0x00000000, /* description */ "shift out data from counter 0. \n"}, 
  {/* name */ "shiftout_data_valid_c0", /* address */ 0x44120104, /* default */ 0x00000000, /* description */ "a new shift_out data flag for counter 0. \n"}, 
  {/* name */ "shiftin_data_ctrl_bitcnts_c0", /* address */ 0x44120108, /* default */ 0x00000000, /* description */ "how man bits of shift_in data for counter 0. . \n"}, 
  {/* name */ "shiftin_data_c0", /* address */ 0x4412010c, /* default */ 0x00000000, /* description */ "shift_in data for counter 0. \n"}, 
  {/* name */ "shiftin_databits_updated_c0", /* address */ 0x44120110, /* default */ 0x00000000, /* description */ "shift_in data(bitmap is updated) for counter 0. \n"}, 
  {/* name */ "shiftmode_point_en_c0", /* address */ 0x44120114, /* default */ 0x00000001, /* description */ "automatic waveform and capture switch mode,for counter 0. \n"}, 
  {/* name */ "ir_din_bypass_c0", /* address */ 0x44120118, /* default */ 0x00000003, /* description */ "bypass control bit for din , for counter 0. \n"}, 
  {/* name */ "ir_din_onecycle_value_a_c0", /* address */ 0x4412011c, /* default */ 0x00000100, /* description */ "IR interface clk 's one cycle value for din , for counter 0. \n"}, 
  {/* name */ "ir_din_onecycle_value_b_c0", /* address */ 0x44120120, /* default */ 0x00000100, /* description */ "IR interface clk 's one cycle value for din , for counter 0. \n"}, 
  {/* name */ "ir_dout_bypass_c0", /* address */ 0x44120124, /* default */ 0x00030000, /* description */ "bypass control bit for dout and opts ,for counter 0. \n"}, 
  {/* name */ "single_start_trigger_c1", /* address */ 0x44120180, /* default */ 0x00000000, /* description */ "counter 1 single trigger register bits. \n"}, 
  {/* name */ "single_stop_trigger_c1", /* address */ 0x44120184, /* default */ 0x00000000, /* description */ "counter 1 single trigger register bits. \n"}, 
  {/* name */ "single_clear_trigger_c1", /* address */ 0x44120188, /* default */ 0x00000000, /* description */ "counter 1 single trigger register bits. \n"}, 
  {/* name */ "single_reset_trigger_c1", /* address */ 0x4412018c, /* default */ 0x00000000, /* description */ "counter 1 single trigger register bits. \n"}, 
  {/* name */ "enable_c1", /* address */ 0x44120190, /* default */ 0x00000000, /* description */ "counter 1 enable_c1 signal. \n"}, 
  {/* name */ "soft_trigger_ctrl_c1", /* address */ 0x44120194, /* default */ 0x00000000, /* description */ "control the function of single/global_trigger. \n"}, 
  {/* name */ "mux_sel_c1", /* address */ 0x44120198, /* default */ 0x00000000, /* description */ "select count 1 inner input data from other counters. \n"}, 
  {/* name */ "src_sel_edge_c1", /* address */ 0x4412019c, /* default */ 0x00000000, /* description */ "select the  valid input and edge for start/stop/din0/din1. \n"}, 
  {/* name */ "snap_status_c1", /* address */ 0x441201a0, /* default */ 0x00000000, /* description */ "the status of snapping the status or data from counter 1  \n"}, 
  {/* name */ "ctrl_snap_c1", /* address */ 0x441201a4, /* default */ 0x00000000, /* description */ "snap the status or data from counter 1. \n"}, 
  {/* name */ "shadow_reg_c1", /* address */ 0x441201a8, /* default */ 0x00000000, /* description */ "snap the current value from counter. \n"}, 
  {/* name */ "mode_sel_c1", /* address */ 0x441201ac, /* default */ 0x00000000, /* description */ "working mode select for counter 1. \n"}, 
  {/* name */ "target_reg_ctrl_c1", /* address */ 0x441201b0, /* default */ 0x00000000, /* description */ "waveform mode control from counter 1. \n"}, 
  {/* name */ "target_reg_a0_c1", /* address */ 0x441201b4, /* default */ 0x00000000, /* description */ "waveform mode , target register a0, for counter 1. \n"}, 
  {/* name */ "target_reg_a1_c1", /* address */ 0x441201b8, /* default */ 0x00000000, /* description */ "waveform mode , target register a0, for counter 1. \n"}, 
  {/* name */ "target_reg_a2_c1", /* address */ 0x441201bc, /* default */ 0x00000000, /* description */ "waveform mode , target register a2, for counter 1. \n"}, 
  {/* name */ "target_reg_b0_c1", /* address */ 0x441201c0, /* default */ 0x00000000, /* description */ "waveform mode , target register b0, for counter 1. \n"}, 
  {/* name */ "target_reg_b1_c1", /* address */ 0x441201c4, /* default */ 0x00000000, /* description */ "waveform mode , target register b1, for counter 1. \n"}, 
  {/* name */ "target_reg_b2_c1", /* address */ 0x441201c8, /* default */ 0x00000000, /* description */ "waveform mode , target register b2, for counter 1. \n"}, 
  {/* name */ "capture_reg_status_c1", /* address */ 0x441201cc, /* default */ 0x00000000, /* description */ "capture mode , snap the status from counter 1. \n"}, 
  {/* name */ "capture_reg_overflow_ctrl_c1", /* address */ 0x441201d0, /* default */ 0x00000000, /* description */ "capture mode , when overflow ,discard or rewrite. \n"}, 
  {/* name */ "capture_reg_a0_c1", /* address */ 0x441201d8, /* default */ 0x00000000, /* description */ "capture mode, capture register a0 for counter 1. \n"}, 
  {/* name */ "capture_reg_a1_c1", /* address */ 0x441201dc, /* default */ 0x00000000, /* description */ "capture mode, capture register a1 for counter 1. \n"}, 
  {/* name */ "capture_reg_a2_c1", /* address */ 0x441201e0, /* default */ 0x00000000, /* description */ "capture mode, capture register a2 for counter 1. \n"}, 
  {/* name */ "capture_reg_b0_c1", /* address */ 0x441201e4, /* default */ 0x00000000, /* description */ "capture mode, capture register b0 for counter 1. \n"}, 
  {/* name */ "capture_reg_b1_c1", /* address */ 0x441201e8, /* default */ 0x00000000, /* description */ "capture mode, capture register b1 for counter 1. \n"}, 
  {/* name */ "capture_reg_b2_c1", /* address */ 0x441201ec, /* default */ 0x00000000, /* description */ "capture mode, capture register b2 for counter 1. \n"}, 
  {/* name */ "switch_mode_onebit_cnts_c1", /* address */ 0x441201f0, /* default */ 0x00000000, /* description */ "waveform and capture switch mode, one bit data means counter value. for counter 1.\n"}, 
  {/* name */ "waveform_mode_automatic_c1", /* address */ 0x441201f4, /* default */ 0x00000000, /* description */ "automatic waveform and capture switch mode,for counter 1. \n"}, 
  {/* name */ "shiftmode_ctrl_c1", /* address */ 0x441201f8, /* default */ 0x00000000, /* description */ "select bus_a or bus_b in shiftin/shiftout mode. \n"}, 
  {/* name */ "shiftout_data_ctrl_bitcnts_c1", /* address */ 0x441201fc, /* default */ 0x00000000, /* description */ "how man bits to shift out data from counter 1. \n"}, 
  {/* name */ "shiftout_data_c1", /* address */ 0x44120200, /* default */ 0x00000000, /* description */ "shift out data from counter 1. \n"}, 
  {/* name */ "shiftout_data_valid_c1", /* address */ 0x44120204, /* default */ 0x00000000, /* description */ "a new shift_out data flag for counter 1. \n"}, 
  {/* name */ "shiftin_data_ctrl_bitcnts_c1", /* address */ 0x44120208, /* default */ 0x00000000, /* description */ "how man bits of shift_in data for counter 1. . \n"}, 
  {/* name */ "shiftin_data_c1", /* address */ 0x4412020c, /* default */ 0x00000000, /* description */ "shift_in data for counter 1. \n"}, 
  {/* name */ "shiftin_databits_updated_c1", /* address */ 0x44120210, /* default */ 0x00000000, /* description */ "shift_in data(bitmap is updated) for counter 1. \n"}, 
  {/* name */ "shiftmode_point_en_c1", /* address */ 0x44120214, /* default */ 0x00000001, /* description */ "automatic waveform and capture switch mode,for counter 0. \n"}, 
  {/* name */ "ir_din_bypass_c1", /* address */ 0x44120218, /* default */ 0x00000003, /* description */ "bypass control bit for din , for counter 1. \n"}, 
  {/* name */ "ir_din_onecycle_value_a_c1", /* address */ 0x4412021c, /* default */ 0x00000100, /* description */ "IR interface clk 's one cycle value for din , for counter 1. \n"}, 
  {/* name */ "ir_din_onecycle_value_b_c1", /* address */ 0x44120220, /* default */ 0x00000100, /* description */ "IR interface clk 's one cycle value for din , for counter 1. \n"}, 
  {/* name */ "ir_dout_bypass_c1", /* address */ 0x44120224, /* default */ 0x00030000, /* description */ "bypass control bit for dout and opts ,for counter 1. \n"}, 
  {/* name */ "single_start_trigger_c2", /* address */ 0x44120280, /* default */ 0x00000000, /* description */ "counter 2 single trigger register bits. \n"}, 
  {/* name */ "single_stop_trigger_c2", /* address */ 0x44120284, /* default */ 0x00000000, /* description */ "counter 2 single trigger register bits. \n"}, 
  {/* name */ "single_clear_trigger_c2", /* address */ 0x44120288, /* default */ 0x00000000, /* description */ "counter 2 single trigger register bits. \n"}, 
  {/* name */ "single_reset_trigger_c2", /* address */ 0x4412028c, /* default */ 0x00000000, /* description */ "counter 2 single trigger register bits. \n"}, 
  {/* name */ "enable_c2", /* address */ 0x44120290, /* default */ 0x00000000, /* description */ "counter 2 enable_c2 signal. \n"}, 
  {/* name */ "soft_trigger_ctrl_c2", /* address */ 0x44120294, /* default */ 0x00000000, /* description */ "control the function of single/global_trigger. \n"}, 
  {/* name */ "mux_sel_c2", /* address */ 0x44120298, /* default */ 0x00000000, /* description */ "select count 2 inner input data from other counters. \n"}, 
  {/* name */ "src_sel_edge_c2", /* address */ 0x4412029c, /* default */ 0x00000000, /* description */ "select the  valid input and edge for start/stop/din0/din1. \n"}, 
  {/* name */ "snap_status_c2", /* address */ 0x441202a0, /* default */ 0x00000000, /* description */ "the status of snapping the status or data from counter 2  \n"}, 
  {/* name */ "ctrl_snap_c2", /* address */ 0x441202a4, /* default */ 0x00000000, /* description */ "snap the status or data from counter 2. \n"}, 
  {/* name */ "shadow_reg_c2", /* address */ 0x441202a8, /* default */ 0x00000000, /* description */ "snap the current value from counter. \n"}, 
  {/* name */ "mode_sel_c2", /* address */ 0x441202ac, /* default */ 0x00000000, /* description */ "working mode select for counter 2. \n"}, 
  {/* name */ "target_reg_ctrl_c2", /* address */ 0x441202b0, /* default */ 0x00000000, /* description */ "waveform mode control from counter 2. \n"}, 
  {/* name */ "target_reg_a0_c2", /* address */ 0x441202b4, /* default */ 0x00000000, /* description */ "waveform mode , target register a0, for counter 2. \n"}, 
  {/* name */ "target_reg_a1_c2", /* address */ 0x441202b8, /* default */ 0x00000000, /* description */ "waveform mode , target register a0, for counter 2. \n"}, 
  {/* name */ "target_reg_a2_c2", /* address */ 0x441202bc, /* default */ 0x00000000, /* description */ "waveform mode , target register a2, for counter 2. \n"}, 
  {/* name */ "target_reg_b0_c2", /* address */ 0x441202c0, /* default */ 0x00000000, /* description */ "waveform mode , target register b0, for counter 2. \n"}, 
  {/* name */ "target_reg_b1_c2", /* address */ 0x441202c4, /* default */ 0x00000000, /* description */ "waveform mode , target register b1, for counter 2. \n"}, 
  {/* name */ "target_reg_b2_c2", /* address */ 0x441202c8, /* default */ 0x00000000, /* description */ "waveform mode , target register b2, for counter 2. \n"}, 
  {/* name */ "capture_reg_status_c2", /* address */ 0x441202cc, /* default */ 0x00000000, /* description */ "capture mode , snap the status from counter 2. \n"}, 
  {/* name */ "capture_reg_overflow_ctrl_c2", /* address */ 0x441202d0, /* default */ 0x00000000, /* description */ "capture mode , when overflow ,discard or rewrite. \n"}, 
  {/* name */ "capture_reg_a0_c2", /* address */ 0x441202d8, /* default */ 0x00000000, /* description */ "capture mode, capture register a0 for counter 2. \n"}, 
  {/* name */ "capture_reg_a1_c2", /* address */ 0x441202dc, /* default */ 0x00000000, /* description */ "capture mode, capture register a1 for counter 2. \n"}, 
  {/* name */ "capture_reg_a2_c2", /* address */ 0x441202e0, /* default */ 0x00000000, /* description */ "capture mode, capture register a2 for counter 2. \n"}, 
  {/* name */ "capture_reg_b0_c2", /* address */ 0x441202e4, /* default */ 0x00000000, /* description */ "capture mode, capture register b0 for counter 2. \n"}, 
  {/* name */ "capture_reg_b1_c2", /* address */ 0x441202e8, /* default */ 0x00000000, /* description */ "capture mode, capture register b1 for counter 2. \n"}, 
  {/* name */ "capture_reg_b2_c2", /* address */ 0x441202ec, /* default */ 0x00000000, /* description */ "capture mode, capture register b2 for counter 2. \n"}, 
  {/* name */ "switch_mode_onebit_cnts_c2", /* address */ 0x441202f0, /* default */ 0x00000000, /* description */ "waveform and capture switch mode, one bit data means counter value. for counter 2.\n"}, 
  {/* name */ "waveform_mode_automatic_c2", /* address */ 0x441202f4, /* default */ 0x00000000, /* description */ "automatic waveform and capture switch mode,for counter 2. \n"}, 
  {/* name */ "shiftmode_ctrl_c2", /* address */ 0x441202f8, /* default */ 0x00000000, /* description */ "select bus_a or bus_b in shiftin/shiftout mode. \n"}, 
  {/* name */ "shiftout_data_ctrl_bitcnts_c2", /* address */ 0x441202fc, /* default */ 0x00000000, /* description */ "how man bits to shift out data from counter 2. \n"}, 
  {/* name */ "shiftout_data_c2", /* address */ 0x44120300, /* default */ 0x00000000, /* description */ "shift out data from counter 2. \n"}, 
  {/* name */ "shiftout_data_valid_c2", /* address */ 0x44120304, /* default */ 0x00000000, /* description */ "a new shift_out data flag for counter 2. \n"}, 
  {/* name */ "shiftin_data_ctrl_bitcnts_c2", /* address */ 0x44120308, /* default */ 0x00000000, /* description */ "how man bits of shift_in data for counter 2. . \n"}, 
  {/* name */ "shiftin_data_c2", /* address */ 0x4412030c, /* default */ 0x00000000, /* description */ "shift_in data for counter 2. \n"}, 
  {/* name */ "shiftin_databits_updated_c2", /* address */ 0x44120310, /* default */ 0x00000000, /* description */ "shift_in data(bitmap is updated) for counter 2. \n"}, 
  {/* name */ "shiftmode_point_en_c2", /* address */ 0x44120314, /* default */ 0x00000001, /* description */ "automatic waveform and capture switch mode,for counter 0. \n"}, 
  {/* name */ "ir_din_bypass_c2", /* address */ 0x44120318, /* default */ 0x00000003, /* description */ "bypass control bit for din , for counter 2. \n"}, 
  {/* name */ "ir_din_onecycle_value_a_c2", /* address */ 0x4412031c, /* default */ 0x00000100, /* description */ "IR interface clk 's one cycle value for din , for counter 2. \n"}, 
  {/* name */ "ir_din_onecycle_value_b_c2", /* address */ 0x44120320, /* default */ 0x00000100, /* description */ "IR interface clk 's one cycle value for din , for counter 2. \n"}, 
  {/* name */ "ir_dout_bypass_c2", /* address */ 0x44120324, /* default */ 0x00030000, /* description */ "bypass control bit for dout and opts ,for counter 2. \n"}, 
  {/* name */ "single_start_trigger_c3", /* address */ 0x44120380, /* default */ 0x00000000, /* description */ "counter 3 single trigger register bits. \n"}, 
  {/* name */ "single_stop_trigger_c3", /* address */ 0x44120384, /* default */ 0x00000000, /* description */ "counter 3 single trigger register bits. \n"}, 
  {/* name */ "single_clear_trigger_c3", /* address */ 0x44120388, /* default */ 0x00000000, /* description */ "counter 3 single trigger register bits. \n"}, 
  {/* name */ "single_reset_trigger_c3", /* address */ 0x4412038c, /* default */ 0x00000000, /* description */ "counter 3 single trigger register bits. \n"}, 
  {/* name */ "enable_c3", /* address */ 0x44120390, /* default */ 0x00000000, /* description */ "counter 3 enable_c3 signal. \n"}, 
  {/* name */ "soft_trigger_ctrl_c3", /* address */ 0x44120394, /* default */ 0x00000000, /* description */ "control the function of single/global_trigger. \n"}, 
  {/* name */ "mux_sel_c3", /* address */ 0x44120398, /* default */ 0x00000000, /* description */ "select counter 3 inner input data from other counters. \n"}, 
  {/* name */ "src_sel_edge_c3", /* address */ 0x4412039c, /* default */ 0x00000000, /* description */ "select the  valid input and edge for start/stop/din0/din1. \n"}, 
  {/* name */ "snap_status_c3", /* address */ 0x441203a0, /* default */ 0x00000000, /* description */ "the status of snapping the status or data from counter 3. \n"}, 
  {/* name */ "ctrl_snap_c3", /* address */ 0x441203a4, /* default */ 0x00000000, /* description */ "snap the status or data from counter 3. \n"}, 
  {/* name */ "shadow_reg_c3", /* address */ 0x441203a8, /* default */ 0x00000000, /* description */ "snap the current value from counter. \n"}, 
  {/* name */ "mode_sel_c3", /* address */ 0x441203ac, /* default */ 0x00000000, /* description */ "working mode select for counter 3. \n"}, 
  {/* name */ "target_reg_ctrl_c3", /* address */ 0x441203b0, /* default */ 0x00000000, /* description */ "waveform mode control from counter 3. \n"}, 
  {/* name */ "target_reg_a0_c3", /* address */ 0x441203b4, /* default */ 0x00000000, /* description */ "waveform mode , target register a0, for counter 3. \n"}, 
  {/* name */ "target_reg_a1_c3", /* address */ 0x441203b8, /* default */ 0x00000000, /* description */ "waveform mode , target register a0, for counter 3. \n"}, 
  {/* name */ "target_reg_a2_c3", /* address */ 0x441203bc, /* default */ 0x00000000, /* description */ "waveform mode , target register a2, for counter 3. \n"}, 
  {/* name */ "target_reg_b0_c3", /* address */ 0x441203c0, /* default */ 0x00000000, /* description */ "waveform mode , target register b0, for counter 3. \n"}, 
  {/* name */ "target_reg_b1_c3", /* address */ 0x441203c4, /* default */ 0x00000000, /* description */ "waveform mode , target register b1, for counter 3. \n"}, 
  {/* name */ "target_reg_b2_c3", /* address */ 0x441203c8, /* default */ 0x00000000, /* description */ "waveform mode , target register b2, for counter 3. \n"}, 
  {/* name */ "capture_reg_status_c3", /* address */ 0x441203cc, /* default */ 0x00000000, /* description */ "capture mode , snap the status from counter 3. \n"}, 
  {/* name */ "capture_reg_overflow_ctrl_c3", /* address */ 0x441203d0, /* default */ 0x00000000, /* description */ "capture mode , when overflow ,discard or rewrite. \n"}, 
  {/* name */ "capture_reg_a0_c3", /* address */ 0x441203d8, /* default */ 0x00000000, /* description */ "capture mode, capture register a0 for counter 3. \n"}, 
  {/* name */ "capture_reg_a1_c3", /* address */ 0x441203dc, /* default */ 0x00000000, /* description */ "capture mode, capture register a1 for counter 3. \n"}, 
  {/* name */ "capture_reg_a2_c3", /* address */ 0x441203e0, /* default */ 0x00000000, /* description */ "capture mode, capture register a2 for counter 3. \n"}, 
  {/* name */ "capture_reg_b0_c3", /* address */ 0x441203e4, /* default */ 0x00000000, /* description */ "capture mode, capture register b0 for counter 3. \n"}, 
  {/* name */ "capture_reg_b1_c3", /* address */ 0x441203e8, /* default */ 0x00000000, /* description */ "capture mode, capture register b1 for counter 3. \n"}, 
  {/* name */ "capture_reg_b2_c3", /* address */ 0x441203ec, /* default */ 0x00000000, /* description */ "capture mode, capture register b2 for counter 3. \n"}, 
  {/* name */ "switch_mode_onebit_cnts_c3", /* address */ 0x441203f0, /* default */ 0x00000000, /* description */ "waveform and capture switch mode, one bit data means counter value. for counter 3.\n"}, 
  {/* name */ "waveform_mode_automatic_c3", /* address */ 0x441203f4, /* default */ 0x00000000, /* description */ "automatic waveform and capture switch mode,for counter 3. \n"}, 
  {/* name */ "shiftmode_ctrl_c3", /* address */ 0x441203f8, /* default */ 0x00000000, /* description */ "select bus_a or bus_b in shiftin/shiftout mode. \n"}, 
  {/* name */ "shiftout_data_ctrl_bitcnts_c3", /* address */ 0x441203fc, /* default */ 0x00000000, /* description */ "how man bits to shift out data from counter 3. \n"}, 
  {/* name */ "shiftout_data_c3", /* address */ 0x44120400, /* default */ 0x00000000, /* description */ "shift out data from counter 3. \n"}, 
  {/* name */ "shiftout_data_valid_c3", /* address */ 0x44120404, /* default */ 0x00000000, /* description */ "a new shift_out data flag for counter 3. \n"}, 
  {/* name */ "shiftin_data_ctrl_bitcnts_c3", /* address */ 0x44120408, /* default */ 0x00000000, /* description */ "how man bits of shift_in data for counter 3. . \n"}, 
  {/* name */ "shiftin_data_c3", /* address */ 0x4412040c, /* default */ 0x00000000, /* description */ "shift_in data for counter 3. \n"}, 
  {/* name */ "shiftin_databits_updated_c3", /* address */ 0x44120410, /* default */ 0x00000000, /* description */ "shift_in data(bitmap is updated) for counter 3. \n"}, 
  {/* name */ "shiftmode_point_en_c3", /* address */ 0x44120414, /* default */ 0x00000001, /* description */ "automatic waveform and capture switch mode,for counter 0. \n"}, 
  {/* name */ "ir_din_bypass_c3", /* address */ 0x44120418, /* default */ 0x00000003, /* description */ "bypass control bit for din , for counter 3. \n"}, 
  {/* name */ "ir_din_onecycle_value_a_c3", /* address */ 0x4412041c, /* default */ 0x00000100, /* description */ "IR interface clk 's one cycle value for din , for counter 3. \n"}, 
  {/* name */ "ir_din_onecycle_value_b_c3", /* address */ 0x44120420, /* default */ 0x00000100, /* description */ "IR interface clk 's one cycle value for din , for counter 3. \n"}, 
  {/* name */ "ir_dout_bypass_c3", /* address */ 0x44120424, /* default */ 0x00030000, /* description */ "bypass control bit for dout and opts ,for counter 3. \n"}
};

field_const_t field_const_counter_all_apb_reg__intr_status[]  = {
  {/* name */ "counter", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "count0 -> [7:0] \ncount1 -> [15:8] \ncount2 -> [23:16] \ncount3 -> [31:24] \n\n"}
};
field_const_t field_const_counter_all_apb_reg__intr_mask_status[]  = {
  {/* name */ "counter", /* range */ "[31:0]", /* default */ "0x1", /* access */ "read-only", /* description */ "count0 -> [7:0] \ncount1 -> [15:8] \ncount2 -> [23:16] \ncount3 -> [31:24] \n\n"}
};
field_const_t field_const_counter_all_apb_reg__intr_clr[]  = {
  {/* name */ "counter", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "count0 -> [7:0] \ncount1 -> [15:8] \ncount2 -> [23:16] \ncount3 -> [31:24] \n\n"}
};
field_const_t field_const_counter_all_apb_reg__intr_set[]  = {
  {/* name */ "counter", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "count0 -> [7:0] \ncount1 -> [15:8] \ncount2 -> [23:16] \ncount3 -> [31:24] \n\n"}
};
field_const_t field_const_counter_all_apb_reg__intr_mask_set[]  = {
  {/* name */ "counter", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "count0 -> [7:0] \ncount1 -> [15:8] \ncount2 -> [23:16] \ncount3 -> [31:24] \n\n"}
};
field_const_t field_const_counter_all_apb_reg__intr_mask_clr[]  = {
  {/* name */ "counter", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "count0 -> [7:0] \ncount1 -> [15:8] \ncount2 -> [23:16] \ncount3 -> [31:24] \n\n"}
};
field_const_t field_const_counter_all_apb_reg__intr_sreset[]  = {
  {/* name */ "o_intrctrl_sreset", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Set interrupt softward reset,high active,high active.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__global_start_trigger[]  = {
  {/* name */ "o_global_start_trigger", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "global start trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__global_stop_trigger[]  = {
  {/* name */ "o_global_stop_trigger", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "global stop trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__global_clear_trigger[]  = {
  {/* name */ "o_global_clear_trigger", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "global clear trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__global_reset_trigger[]  = {
  {/* name */ "o_global_reset_trigger", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "global reset trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__din_mux_sel[]  = {
  {/* name */ "o_din_mux_sel", /* range */ "[31:0]", /* default */ "0x76543210", /* access */ "read-write", /* description */ "sel:\nbit2~bit0: counter 0 a;\nbit6~bit4: counter 0 b;\nbit10~bit8: counter 1 a;\nbit14~bit12: counter 1 b;\nbit18~bit16: counter 2 a;\nbit22~bit20: counter 2 b;\nbit26~bit24: counter 3 a;\nbit30~bit28: counter 3 b;\nmeaning;\n0x0: din a0;\n0x1: din b0;\n0x2: din a1;\n0x3: din b1;\n0x4: din a2;\n0x5: din b2;\n0x6: din a2;\n0x7: din b2;\n\n"}
};
field_const_t field_const_counter_all_apb_reg__dout_mux_sel[]  = {
  {/* name */ "o_dout_mux_sel", /* range */ "[31:0]", /* default */ "0x76543210", /* access */ "read-write", /* description */ "sel:\nbit2~bit0: counter 0 a;\nbit6~bit4: counter 0 b;\nbit10~bit8: counter 1 a;\nbit14~bit12: counter 1 b;\nbit18~bit16: counter 2 a;\nbit22~bit20: counter 2 b;\nbit26~bit24: counter 3 a;\nbit30~bit28: counter 3 b;\nmeaning;\n0x0: dout a0;\n0x1: dout b0;\n0x2: dout a1;\n0x3: dout b1;\n0x4: dout a2;\n0x5: dout b2;\n0x6: dout a2;\n0x7: dout b2;\n\n"}
};
field_const_t field_const_counter_all_apb_reg__dout_enable_ctrl[]  = {
  {/* name */ "o_dout_enable_ctrl", /* range */ "[31:0]", /* default */ "0x11111111", /* access */ "read-write", /* description */ "sel:\nbit1~bit0: counter 0 a;\nbit5~bit4: counter 0 b;\nbit9~bit8: counter 1 a;\nbit13~bit12: counter 1 b;\nbit17~bit16: counter 2 a;\nbit21~bit20: counter 2 b;\nbit25~bit24: counter 3 a;\nbit29~bit28: counter 3 b;\nmeaning(bitmap);\nbit0: dout_en_origial & bit0;\nbit1: dout_en_origial | bit1;\n\n"}
};
field_const_t field_const_counter_all_apb_reg__single_start_trigger_c0[]  = {
  {/* name */ "o_single_start_trigger_c0", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 0 single start trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_stop_trigger_c0[]  = {
  {/* name */ "o_single_stop_trigger_c0", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 0 single stop trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_clear_trigger_c0[]  = {
  {/* name */ "o_single_clear_trigger_c0", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 0 single clear trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_reset_trigger_c0[]  = {
  {/* name */ "o_single_reset_trigger_c0", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 0 single reset trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__enable_c0[]  = {
  {/* name */ "o_enable_c0", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 0 enable signal. \n"}, 
  {/* name */ "o_clk_ctrl_c0", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 0 clock select and inverse enable. & clock enable signal.\n[11:8]-> clock select;\n[12:12]-> clock inverser enable,high active;\n[13:13]-> clock enable,high active;\n\n"}
};
field_const_t field_const_counter_all_apb_reg__soft_trigger_ctrl_c0[]  = {
  {/* name */ "o_soft_trigger_ctrl_c0", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "for counter 0 only.\nevery bit means the same. 1--> softward trigger signal, 0--> normal control signal.\n[0]:set for signal o_global_start_trigger.\n[1]:set for signal o_global_stop_trigger.\n[2]:set for signal o_global_clear_trigger.\n[3]:set for signal o_global_reset_trigger.\n[4]:set for signal o_single_start_trigger.\n[5]:set for signal o_single_stop_trigger.\n[6]:set for signal o_single_clear_trigger.\n[7]:set for signal o_single_reset_trigger.\n\n"}
};
field_const_t field_const_counter_all_apb_reg__mux_sel_c0[]  = {
  {/* name */ "o_mux_sel_c0", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "bit0: 0--> bus_a, 1--> bus_b.\nbit1: 0--> bus_a, 1--> bus_b.\nbit2: 0--> bus_a, 1--> bus_b.\nbit3: 0--> bus_a, 1--> bus_b.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:4]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__src_sel_edge_c0[]  = {
  {/* name */ "o_src_sel_start_c0", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the  valid input for start signal.\n\n"}, 
  {/* name */ "o_src_edge_start_c0", /* range */ "[5:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for start signal.\n"}, 
  {/* name */ "o_src_sel_stop_c0", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for stop signal.\n"}, 
  {/* name */ "o_src_edge_stop_c0", /* range */ "[13:12]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for start signal.\n"}, 
  {/* name */ "o_src_sel_din0_c0", /* range */ "[19:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for din0 signal.\n"}, 
  {/* name */ "o_src_edge_din0_c0", /* range */ "[21:20]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for din0 signal.\n"}, 
  {/* name */ "o_src_sel_din1_c0", /* range */ "[27:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for din1 signal.\n"}, 
  {/* name */ "o_src_edge_din1_c0", /* range */ "[29:28]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for din1 signal.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:30]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__snap_status_c0[]  = {
  {/* name */ "i_snap_status_c0", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "the status of snapping the status or data from counter 0. \n"}
};
field_const_t field_const_counter_all_apb_reg__ctrl_snap_c0[]  = {
  {/* name */ "o_ctrl_snap_c0", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "snap the status or data from counter 0. \n"}, 
  {/* name */ "o_clear_snap_c0", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "clear the status of snap the status or data from counter 0. \n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shadow_reg_c0[]  = {
  {/* name */ "i_shadow_reg_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "snap the current value from counter.\n"}
};
field_const_t field_const_counter_all_apb_reg__mode_sel_c0[]  = {
  {/* name */ "o_mode_sel_c0", /* range */ "[2:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "[0]: 0-capture_mode/shitin_mode, 1-waveform_mode/shiftout_mode.\n[1]: 0-count mode, 1-shift mode.\n[2]: 0-automatic switch mode disable. 1-enable.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:3]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__target_reg_ctrl_c0[]  = {
  {/* name */ "o_target_reg_ctrl_c0", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "[0]: when counters meet i_target_reg_a2, 1- keep the value,   0- reset the value.\n[1]: when counters meet i_target_reg_a2, 1- stop the counter, 0- restart the counter.\n[2]: when counters meet i_target_reg_b2, 1- keep the value,   0- reset the value.\n[3]: when counters meet i_target_reg_b2, 1- stop the counter, 0- restart the counter.\n[4]: dout_a reset value.\n[5]: dout_b reset value.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:6]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a0_c0[]  = {
  {/* name */ "o_target_reg_a0_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a0.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a1_c0[]  = {
  {/* name */ "o_target_reg_a1_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a1.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a2_c0[]  = {
  {/* name */ "o_target_reg_a2_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a2.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b0_c0[]  = {
  {/* name */ "o_target_reg_b0_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b0.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b1_c0[]  = {
  {/* name */ "o_target_reg_b1_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b1.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b2_c0[]  = {
  {/* name */ "o_target_reg_b2_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b2.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_status_c0[]  = {
  {/* name */ "i_capture_reg_status_c0", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "every bit means the same, 1--> new data, 0--> old data.\n[0] : for o_capture_reg_a0.\n[1] : for o_capture_reg_a0.\n[2] : for o_capture_reg_a0.\n[0] : for o_capture_reg_b0.\n[1] : for o_capture_reg_b1.\n[2] : for o_capture_reg_b2.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:6]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_overflow_ctrl_c0[]  = {
  {/* name */ "o_capture_reg_overflow_ctrl_c0", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "every bit means the same as i_capture_reg_status_c0.\n1--> rewrite, o--> discard.\n\n"}, 
  {/* name */ "o_capture_mode_automatic_validedge_c0", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "capture mode first valid edge flag on ,1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a0_c0[]  = {
  {/* name */ "i_capture_reg_a0_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a0.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a1_c0[]  = {
  {/* name */ "i_capture_reg_a1_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a1.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a2_c0[]  = {
  {/* name */ "i_capture_reg_a2_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a2.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b0_c0[]  = {
  {/* name */ "i_capture_reg_b0_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b0.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b1_c0[]  = {
  {/* name */ "i_capture_reg_b1_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b1.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b2_c0[]  = {
  {/* name */ "i_capture_reg_b2_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b2.\n"}
};
field_const_t field_const_counter_all_apb_reg__switch_mode_onebit_cnts_c0[]  = {
  {/* name */ "o_switch_mode_onebit_cnts_c0", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform and capture switch mode, one bit data means counter value\n"}
};
field_const_t field_const_counter_all_apb_reg__waveform_mode_automatic_c0[]  = {
  {/* name */ "o_waveform_mode_cnts_c0", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , data sended counts.\n"}, 
  {/* name */ "o_capture_mode_cnts_c0", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "capture mode , data received counts.\n"}, 
  {/* name */ "o_waveform_mode_automatic_sw_c0", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "automatic switch to waveform mode. 1- enable,0-disable.\n"}, 
  {/* name */ "o_capture_mode_automatic_sw_c0", /* range */ "[24:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "automatic switch to capture mode. 1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:25]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftmode_ctrl_c0[]  = {
  {/* name */ "o_shiftmode_ctrl_c0", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "0-bus_a(din_a/dout_a),1-bus_b(din_b/dout_b).\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_ctrl_bitcnts_c0[]  = {
  {/* name */ "o_shiftout_data_ctrl_bitcnts_c0", /* range */ "[4:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "how man bits to shift out data from counter 0. valud 0 means 1 bit.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:5]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_c0[]  = {
  {/* name */ "o_shiftout_data_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "shift out data from counter 0\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_valid_c0[]  = {
  {/* name */ "o_shiftout_data_valid_c0", /* range */ "[0:0]", /* default */ "0x0", /* access */ "write-only", /* description */ "a new shift_out data flag, high pulse is valid.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftin_data_ctrl_bitcnts_c0[]  = {
  {/* name */ "o_shiftin_data_ctrl_bitcnts_c0", /* range */ "[4:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "how man bits of shift_in data for counter 0. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:5]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftin_data_c0[]  = {
  {/* name */ "i_shiftin_data_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "shift_in data.\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftin_databits_updated_c0[]  = {
  {/* name */ "i_shiftin_databits_updated_c0", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "shift_in data(bitmap is updated) for counter 0. value 1 is acitve.\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftmode_point_en_c0[]  = {
  {/* name */ "o_shiftmode_point_cnts_c0", /* range */ "[15:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "shiftin data in this cnts or shiftout data in the cnts..\n"}, 
  {/* name */ "o_shiftmode_point_en_c0", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "shiftin data in this cnts or shiftout data in the cnts enable ,1 is active. 1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__ir_din_bypass_c0[]  = {
  {/* name */ "o_ir_din_bypass_c0", /* range */ "[1:0]", /* default */ "0x3", /* access */ "read-write", /* description */ "bypass control bit,0->a,1->b.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__ir_din_onecycle_value_a_c0[]  = {
  {/* name */ "o_ir_din_onecycle_value_a_c0", /* range */ "[31:0]", /* default */ "0x100", /* access */ "read-write", /* description */ "IR interface clk 's one cycle value for din,for bus a.\n"}
};
field_const_t field_const_counter_all_apb_reg__ir_din_onecycle_value_b_c0[]  = {
  {/* name */ "o_ir_din_onecycle_value_b_c0", /* range */ "[31:0]", /* default */ "0x100", /* access */ "read-write", /* description */ "IR interface clk 's one cycle value for din,for bus b.\n"}
};
field_const_t field_const_counter_all_apb_reg__ir_dout_bypass_c0[]  = {
  {/* name */ "o_ir_dout_opts_c0", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "opts control bit,0->a,1->b.\n"}, 
  {/* name */ "o_ir_dout_bypass_c0", /* range */ "[17:16]", /* default */ "0x3", /* access */ "read-write", /* description */ "dout bypass control bit,0->a,1->b.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:18]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_start_trigger_c1[]  = {
  {/* name */ "o_single_start_trigger_c1", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 1 single start trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_stop_trigger_c1[]  = {
  {/* name */ "o_single_stop_trigger_c1", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 1 single stop trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_clear_trigger_c1[]  = {
  {/* name */ "o_single_clear_trigger_c1", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 1 single clear trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_reset_trigger_c1[]  = {
  {/* name */ "o_single_reset_trigger_c1", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 1 single reset trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__enable_c1[]  = {
  {/* name */ "o_enable_c1", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 1 enable signal. \n"}, 
  {/* name */ "o_clk_ctrl_c1", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "count 1 clock select and inverse enable. \n"}
};
field_const_t field_const_counter_all_apb_reg__soft_trigger_ctrl_c1[]  = {
  {/* name */ "o_soft_trigger_ctrl_c1", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "for counter 1 only.\nevery bit means the same. 1--> softward trigger signal, 0--> normal control signal.\n[0]:set for signal o_global_start_trigger.\n[1]:set for signal o_global_stop_trigger.\n[2]:set for signal o_global_clear_trigger.\n[3]:set for signal o_global_reset_trigger.\n[4]:set for signal o_single_start_trigger.\n[5]:set for signal o_single_stop_trigger.\n[6]:set for signal o_single_clear_trigger.\n[7]:set for signal o_single_reset_trigger.\n\n"}
};
field_const_t field_const_counter_all_apb_reg__mux_sel_c1[]  = {
  {/* name */ "o_mux_sel_c1", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "bit0: 0--> bus_a, 1--> bus_b.\nbit1: 0--> bus_a, 1--> bus_b.\nbit2: 0--> bus_a, 1--> bus_b.\nbit3: 0--> bus_a, 1--> bus_b.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:4]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__src_sel_edge_c1[]  = {
  {/* name */ "o_src_sel_start_c1", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the  valid input for start signal.\n\n"}, 
  {/* name */ "o_src_edge_start_c1", /* range */ "[5:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for start signal.\n"}, 
  {/* name */ "o_src_sel_stop_c1", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for stop signal.\n"}, 
  {/* name */ "o_src_edge_stop_c1", /* range */ "[13:12]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for start signal.\n"}, 
  {/* name */ "o_src_sel_din0_c1", /* range */ "[19:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for din0 signal.\n"}, 
  {/* name */ "o_src_edge_din0_c1", /* range */ "[21:20]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for din0 signal.\n"}, 
  {/* name */ "o_src_sel_din1_c1", /* range */ "[27:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for din1 signal.\n"}, 
  {/* name */ "o_src_edge_din1_c1", /* range */ "[29:28]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for din1 signal.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:30]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__snap_status_c1[]  = {
  {/* name */ "i_snap_status_c1", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "the status of snapping the status or data from counter 1. \n"}
};
field_const_t field_const_counter_all_apb_reg__ctrl_snap_c1[]  = {
  {/* name */ "o_ctrl_snap_c1", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "snap the status or data from counter 1. \n"}, 
  {/* name */ "o_clear_snap_c1", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "clear the status of snap the status or data from counter 1. \n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shadow_reg_c1[]  = {
  {/* name */ "i_shadow_reg_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "snap the current value from counter.\n"}
};
field_const_t field_const_counter_all_apb_reg__mode_sel_c1[]  = {
  {/* name */ "o_mode_sel_c1", /* range */ "[2:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "[0]: 0-capture_mode/shitin_mode, 1-waveform_mode/shiftout_mode.\n[1]: 0-count mode, 1-shift mode.\n[2]: 0-automatic switch mode disable. 1-enable.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:3]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__target_reg_ctrl_c1[]  = {
  {/* name */ "o_target_reg_ctrl_c1", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "[0]: when counters meet i_target_reg_a2, 1- keep the value,   0- reset the value.\n[1]: when counters meet i_target_reg_a2, 1- stop the counter, 0- restart the counter.\n[2]: when counters meet i_target_reg_b2, 1- keep the value,   0- reset the value.\n[3]: when counters meet i_target_reg_b2, 1- stop the counter, 0- restart the counter.\n[4]: dout_a reset value.\n[5]: dout_b reset value.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:6]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a0_c1[]  = {
  {/* name */ "o_target_reg_a0_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a0.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a1_c1[]  = {
  {/* name */ "o_target_reg_a1_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a1.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a2_c1[]  = {
  {/* name */ "o_target_reg_a2_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a2.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b0_c1[]  = {
  {/* name */ "o_target_reg_b0_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b0.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b1_c1[]  = {
  {/* name */ "o_target_reg_b1_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b1.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b2_c1[]  = {
  {/* name */ "o_target_reg_b2_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b2.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_status_c1[]  = {
  {/* name */ "i_capture_reg_status_c1", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "every bit means the same, 1--> new data, 0--> old data.\n[0] : for o_capture_reg_a0.\n[1] : for o_capture_reg_a0.\n[2] : for o_capture_reg_a0.\n[0] : for o_capture_reg_b0.\n[1] : for o_capture_reg_b1.\n[2] : for o_capture_reg_b2.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:6]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_overflow_ctrl_c1[]  = {
  {/* name */ "o_capture_reg_overflow_ctrl_c1", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "every bit means the same as i_capture_reg_status_c1.\n1--> rewrite, o--> discard.\n\n"}, 
  {/* name */ "o_capture_mode_automatic_validedge_c1", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "capture mode first valid edge flag on ,1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a0_c1[]  = {
  {/* name */ "i_capture_reg_a0_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a0.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a1_c1[]  = {
  {/* name */ "i_capture_reg_a1_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a1.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a2_c1[]  = {
  {/* name */ "i_capture_reg_a2_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a2.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b0_c1[]  = {
  {/* name */ "i_capture_reg_b0_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b0.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b1_c1[]  = {
  {/* name */ "i_capture_reg_b1_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b1.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b2_c1[]  = {
  {/* name */ "i_capture_reg_b2_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b2.\n"}
};
field_const_t field_const_counter_all_apb_reg__switch_mode_onebit_cnts_c1[]  = {
  {/* name */ "o_switch_mode_onebit_cnts_c1", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform and capture switch mode, one bit data means counter value\n"}
};
field_const_t field_const_counter_all_apb_reg__waveform_mode_automatic_c1[]  = {
  {/* name */ "o_waveform_mode_cnts_c1", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , data sended counts.\n"}, 
  {/* name */ "o_capture_mode_cnts_c1", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "capture mode , data received counts.\n"}, 
  {/* name */ "o_waveform_mode_automatic_sw_c1", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "automatic switch to waveform mode. 1- enable,0-disable.\n"}, 
  {/* name */ "o_capture_mode_automatic_sw_c1", /* range */ "[24:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "automatic switch to capture mode. 1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:25]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftmode_ctrl_c1[]  = {
  {/* name */ "o_shiftmode_ctrl_c1", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "0-bus_a(din_a/dout_a),1-bus_b(din_b/dout_b).\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_ctrl_bitcnts_c1[]  = {
  {/* name */ "o_shiftout_data_ctrl_bitcnts_c1", /* range */ "[4:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "how man bits to shift out data from counter 1. valud 0 means 1 bit.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:5]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_c1[]  = {
  {/* name */ "o_shiftout_data_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "shift out data from counter 1\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_valid_c1[]  = {
  {/* name */ "o_shiftout_data_valid_c1", /* range */ "[0:0]", /* default */ "0x0", /* access */ "write-only", /* description */ "a new shift_out data flag, high pulse is valid.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftin_data_ctrl_bitcnts_c1[]  = {
  {/* name */ "o_shiftin_data_ctrl_bitcnts_c1", /* range */ "[4:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "how man bits of shift_in data for counter 1. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:5]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftin_data_c1[]  = {
  {/* name */ "i_shiftin_data_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "shift_in data.\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftin_databits_updated_c1[]  = {
  {/* name */ "i_shiftin_databits_updated_c1", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "shift_in data(bitmap is updated) for counter 1. value 1 is acitve.\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftmode_point_en_c1[]  = {
  {/* name */ "o_shiftmode_point_cnts_c1", /* range */ "[15:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "shiftin data in this cnts or shiftout data in the cnts..\n"}, 
  {/* name */ "o_shiftmode_point_en_c1", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "shiftin data in this cnts or shiftout data in the cnts enable ,1 is active. 1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__ir_din_bypass_c1[]  = {
  {/* name */ "o_ir_din_bypass_c1", /* range */ "[1:0]", /* default */ "0x3", /* access */ "read-write", /* description */ "bypass control bit,0->a,1->b.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__ir_din_onecycle_value_a_c1[]  = {
  {/* name */ "o_ir_din_onecycle_value_a_c1", /* range */ "[31:0]", /* default */ "0x100", /* access */ "read-write", /* description */ "IR interface clk 's one cycle value for din,for bus a.\n"}
};
field_const_t field_const_counter_all_apb_reg__ir_din_onecycle_value_b_c1[]  = {
  {/* name */ "o_ir_din_onecycle_value_b_c1", /* range */ "[31:0]", /* default */ "0x100", /* access */ "read-write", /* description */ "IR interface clk 's one cycle value for din,for bus b.\n"}
};
field_const_t field_const_counter_all_apb_reg__ir_dout_bypass_c1[]  = {
  {/* name */ "o_ir_dout_opts_c1", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "opts control bit,0->a,1->b.\n"}, 
  {/* name */ "o_ir_dout_bypass_c1", /* range */ "[17:16]", /* default */ "0x3", /* access */ "read-write", /* description */ "dout bypass control bit,0->a,1->b.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:18]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_start_trigger_c2[]  = {
  {/* name */ "o_single_start_trigger_c2", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 2 single start trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_stop_trigger_c2[]  = {
  {/* name */ "o_single_stop_trigger_c2", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 2 single stop trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_clear_trigger_c2[]  = {
  {/* name */ "o_single_clear_trigger_c2", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 2 single clear trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_reset_trigger_c2[]  = {
  {/* name */ "o_single_reset_trigger_c2", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 2 single reset trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__enable_c2[]  = {
  {/* name */ "o_enable_c2", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 2 enable signal. \n"}, 
  {/* name */ "o_clk_ctrl_c2", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 2 clock select and inverse enable. \n"}
};
field_const_t field_const_counter_all_apb_reg__soft_trigger_ctrl_c2[]  = {
  {/* name */ "o_soft_trigger_ctrl_c2", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "for counter 2 only.\nevery bit means the same. 1--> softward trigger signal, 0--> normal control signal.\n[0]:set for signal o_global_start_trigger.\n[1]:set for signal o_global_stop_trigger.\n[2]:set for signal o_global_clear_trigger.\n[3]:set for signal o_global_reset_trigger.\n[4]:set for signal o_single_start_trigger.\n[5]:set for signal o_single_stop_trigger.\n[6]:set for signal o_single_clear_trigger.\n[7]:set for signal o_single_reset_trigger.\n\n"}
};
field_const_t field_const_counter_all_apb_reg__mux_sel_c2[]  = {
  {/* name */ "o_mux_sel_c2", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "bit0: 0--> bus_a, 1--> bus_b.\nbit1: 0--> bus_a, 1--> bus_b.\nbit2: 0--> bus_a, 1--> bus_b.\nbit3: 0--> bus_a, 1--> bus_b.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:4]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__src_sel_edge_c2[]  = {
  {/* name */ "o_src_sel_start_c2", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the  valid input for start signal.\n\n"}, 
  {/* name */ "o_src_edge_start_c2", /* range */ "[5:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for start signal.\n"}, 
  {/* name */ "o_src_sel_stop_c2", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for stop signal.\n"}, 
  {/* name */ "o_src_edge_stop_c2", /* range */ "[13:12]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for start signal.\n"}, 
  {/* name */ "o_src_sel_din0_c2", /* range */ "[19:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for din0 signal.\n"}, 
  {/* name */ "o_src_edge_din0_c2", /* range */ "[21:20]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for din0 signal.\n"}, 
  {/* name */ "o_src_sel_din1_c2", /* range */ "[27:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for din1 signal.\n"}, 
  {/* name */ "o_src_edge_din1_c2", /* range */ "[29:28]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for din1 signal.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:30]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__snap_status_c2[]  = {
  {/* name */ "i_snap_status_c2", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "the status of snapping the status or data from counter 2. \n"}
};
field_const_t field_const_counter_all_apb_reg__ctrl_snap_c2[]  = {
  {/* name */ "o_ctrl_snap_c2", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "snap the status or data from counter 2. \n"}, 
  {/* name */ "o_clear_snap_c2", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "clear the status of snap the status or data from counter 2. \n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shadow_reg_c2[]  = {
  {/* name */ "i_shadow_reg_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "snap the current value from counter.\n"}
};
field_const_t field_const_counter_all_apb_reg__mode_sel_c2[]  = {
  {/* name */ "o_mode_sel_c2", /* range */ "[2:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "[0]: 0-capture_mode/shitin_mode, 1-waveform_mode/shiftout_mode.\n[1]: 0-count mode, 1-shift mode.\n[2]: 0-automatic switch mode disable. 1-enable.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:3]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__target_reg_ctrl_c2[]  = {
  {/* name */ "o_target_reg_ctrl_c2", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "[0]: when counters meet i_target_reg_a2, 1- keep the value,   0- reset the value.\n[1]: when counters meet i_target_reg_a2, 1- stop the counter, 0- restart the counter.\n[2]: when counters meet i_target_reg_b2, 1- keep the value,   0- reset the value.\n[3]: when counters meet i_target_reg_b2, 1- stop the counter, 0- restart the counter.\n[4]: dout_a reset value.\n[5]: dout_b reset value.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:6]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a0_c2[]  = {
  {/* name */ "o_target_reg_a0_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a0.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a1_c2[]  = {
  {/* name */ "o_target_reg_a1_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a1.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a2_c2[]  = {
  {/* name */ "o_target_reg_a2_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a2.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b0_c2[]  = {
  {/* name */ "o_target_reg_b0_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b0.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b1_c2[]  = {
  {/* name */ "o_target_reg_b1_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b1.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b2_c2[]  = {
  {/* name */ "o_target_reg_b2_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b2.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_status_c2[]  = {
  {/* name */ "i_capture_reg_status_c2", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "every bit means the same, 1--> new data, 0--> old data.\n[0] : for o_capture_reg_a0.\n[1] : for o_capture_reg_a0.\n[2] : for o_capture_reg_a0.\n[0] : for o_capture_reg_b0.\n[1] : for o_capture_reg_b1.\n[2] : for o_capture_reg_b2.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:6]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_overflow_ctrl_c2[]  = {
  {/* name */ "o_capture_reg_overflow_ctrl_c2", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "every bit means the same as i_capture_reg_status_c2.\n1--> rewrite, o--> discard.\n\n"}, 
  {/* name */ "o_capture_mode_automatic_validedge_c2", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "capture mode first valid edge flag on ,1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a0_c2[]  = {
  {/* name */ "i_capture_reg_a0_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a0.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a1_c2[]  = {
  {/* name */ "i_capture_reg_a1_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a1.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a2_c2[]  = {
  {/* name */ "i_capture_reg_a2_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a2.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b0_c2[]  = {
  {/* name */ "i_capture_reg_b0_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b0.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b1_c2[]  = {
  {/* name */ "i_capture_reg_b1_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b1.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b2_c2[]  = {
  {/* name */ "i_capture_reg_b2_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b2.\n"}
};
field_const_t field_const_counter_all_apb_reg__switch_mode_onebit_cnts_c2[]  = {
  {/* name */ "o_switch_mode_onebit_cnts_c2", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform and capture switch mode, one bit data means counter value\n"}
};
field_const_t field_const_counter_all_apb_reg__waveform_mode_automatic_c2[]  = {
  {/* name */ "o_waveform_mode_cnts_c2", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , data sended counts.\n"}, 
  {/* name */ "o_capture_mode_cnts_c2", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "capture mode , data received counts.\n"}, 
  {/* name */ "o_waveform_mode_automatic_sw_c2", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "automatic switch to waveform mode. 1- enable,0-disable.\n"}, 
  {/* name */ "o_capture_mode_automatic_sw_c2", /* range */ "[24:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "automatic switch to capture mode. 1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:25]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftmode_ctrl_c2[]  = {
  {/* name */ "o_shiftmode_ctrl_c2", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "0-bus_a(din_a/dout_a),1-bus_b(din_b/dout_b).\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_ctrl_bitcnts_c2[]  = {
  {/* name */ "o_shiftout_data_ctrl_bitcnts_c2", /* range */ "[4:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "how man bits to shift out data from counter 2. valud 0 means 1 bit.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:5]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_c2[]  = {
  {/* name */ "o_shiftout_data_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "shift out data from counter 2\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_valid_c2[]  = {
  {/* name */ "o_shiftout_data_valid_c2", /* range */ "[0:0]", /* default */ "0x0", /* access */ "write-only", /* description */ "a new shift_out data flag, high pulse is valid.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftin_data_ctrl_bitcnts_c2[]  = {
  {/* name */ "o_shiftin_data_ctrl_bitcnts_c2", /* range */ "[4:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "how man bits of shift_in data for counter 2. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:5]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftin_data_c2[]  = {
  {/* name */ "i_shiftin_data_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "shift_in data.\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftin_databits_updated_c2[]  = {
  {/* name */ "i_shiftin_databits_updated_c2", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "shift_in data(bitmap is updated) for counter 2. value 1 is acitve.\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftmode_point_en_c2[]  = {
  {/* name */ "o_shiftmode_point_cnts_c2", /* range */ "[15:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "shiftin data in this cnts or shiftout data in the cnts..\n"}, 
  {/* name */ "o_shiftmode_point_en_c2", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "shiftin data in this cnts or shiftout data in the cnts enable ,1 is active. 1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__ir_din_bypass_c2[]  = {
  {/* name */ "o_ir_din_bypass_c2", /* range */ "[1:0]", /* default */ "0x3", /* access */ "read-write", /* description */ "bypass control bit,0->a,1->b.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__ir_din_onecycle_value_a_c2[]  = {
  {/* name */ "o_ir_din_onecycle_value_a_c2", /* range */ "[31:0]", /* default */ "0x100", /* access */ "read-write", /* description */ "IR interface clk 's one cycle value for din,for bus a.\n"}
};
field_const_t field_const_counter_all_apb_reg__ir_din_onecycle_value_b_c2[]  = {
  {/* name */ "o_ir_din_onecycle_value_b_c2", /* range */ "[31:0]", /* default */ "0x100", /* access */ "read-write", /* description */ "IR interface clk 's one cycle value for din,for bus b.\n"}
};
field_const_t field_const_counter_all_apb_reg__ir_dout_bypass_c2[]  = {
  {/* name */ "o_ir_dout_opts_c2", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "opts control bit,0->a,1->b.\n"}, 
  {/* name */ "o_ir_dout_bypass_c2", /* range */ "[17:16]", /* default */ "0x3", /* access */ "read-write", /* description */ "dout bypass control bit,0->a,1->b.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:18]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_start_trigger_c3[]  = {
  {/* name */ "o_single_start_trigger_c3", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 3 single start trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_stop_trigger_c3[]  = {
  {/* name */ "o_single_stop_trigger_c3", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 3 single stop trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_clear_trigger_c3[]  = {
  {/* name */ "o_single_clear_trigger_c3", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 3 single clear trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__single_reset_trigger_c3[]  = {
  {/* name */ "o_single_reset_trigger_c3", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 3 single reset trigger. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__enable_c3[]  = {
  {/* name */ "o_enable_c3", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "counter 3 enable signal. \n"}, 
  {/* name */ "o_clk_ctrl_c3", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "count 3 clock select and inverse enable. \n"}
};
field_const_t field_const_counter_all_apb_reg__soft_trigger_ctrl_c3[]  = {
  {/* name */ "o_soft_trigger_ctrl_c3", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "for counter 3 only.\nevery bit means the same. 1--> softward trigger signal, 0--> normal control signal.\n[0]:set for signal o_global_start_trigger.\n[1]:set for signal o_global_stop_trigger.\n[2]:set for signal o_global_clear_trigger.\n[3]:set for signal o_global_reset_trigger.\n[4]:set for signal o_single_start_trigger.\n[5]:set for signal o_single_stop_trigger.\n[6]:set for signal o_single_clear_trigger.\n[7]:set for signal o_single_reset_trigger.\n\n"}
};
field_const_t field_const_counter_all_apb_reg__mux_sel_c3[]  = {
  {/* name */ "o_mux_sel_c3", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "bit0: 0--> bus_a, 1--> bus_b.\nbit1: 0--> bus_a, 1--> bus_b.\nbit2: 0--> bus_a, 1--> bus_b.\nbit3: 0--> bus_a, 1--> bus_b.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:4]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__src_sel_edge_c3[]  = {
  {/* name */ "o_src_sel_start_c3", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the  valid input for start signal.\n\n"}, 
  {/* name */ "o_src_edge_start_c3", /* range */ "[5:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for start signal.\n"}, 
  {/* name */ "o_src_sel_stop_c3", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for stop signal.\n"}, 
  {/* name */ "o_src_edge_stop_c3", /* range */ "[13:12]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for start signal.\n"}, 
  {/* name */ "o_src_sel_din0_c3", /* range */ "[19:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for din0 signal.\n"}, 
  {/* name */ "o_src_edge_din0_c3", /* range */ "[21:20]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for din0 signal.\n"}, 
  {/* name */ "o_src_sel_din1_c3", /* range */ "[27:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid input for din1 signal.\n"}, 
  {/* name */ "o_src_edge_din1_c3", /* range */ "[29:28]", /* default */ "0x0", /* access */ "read-write", /* description */ "select the valid edge for din1 signal.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:30]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__snap_status_c3[]  = {
  {/* name */ "i_snap_status_c3", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "the status of snapping the status or data from counter 3. \n"}
};
field_const_t field_const_counter_all_apb_reg__ctrl_snap_c3[]  = {
  {/* name */ "o_ctrl_snap_c3", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "snap the status or data from counter 3. \n"}, 
  {/* name */ "o_clear_snap_c3", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "clear the status of snap the status or data from counter 3. \n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shadow_reg_c3[]  = {
  {/* name */ "i_shadow_reg_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "snap the current value from counter.\n"}
};
field_const_t field_const_counter_all_apb_reg__mode_sel_c3[]  = {
  {/* name */ "o_mode_sel_c3", /* range */ "[2:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "[0]: 0-capture_mode/shitin_mode, 1-waveform_mode/shiftout_mode.\n[1]: 0-count mode, 1-shift mode.\n[2]: 0-automatic switch mode disable. 1-enable.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:3]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__target_reg_ctrl_c3[]  = {
  {/* name */ "o_target_reg_ctrl_c3", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "[0]: when counters meet i_target_reg_a2, 1- keep the value,   0- reset the value.\n[1]: when counters meet i_target_reg_a2, 1- stop the counter, 0- restart the counter.\n[2]: when counters meet i_target_reg_b2, 1- keep the value,   0- reset the value.\n[3]: when counters meet i_target_reg_b2, 1- stop the counter, 0- restart the counter.\n[4]: dout_a reset value.\n[5]: dout_b reset value.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:6]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a0_c3[]  = {
  {/* name */ "o_target_reg_a0_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a0.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a1_c3[]  = {
  {/* name */ "o_target_reg_a1_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a1.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_a2_c3[]  = {
  {/* name */ "o_target_reg_a2_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register a2.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b0_c3[]  = {
  {/* name */ "o_target_reg_b0_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b0.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b1_c3[]  = {
  {/* name */ "o_target_reg_b1_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b1.\n"}
};
field_const_t field_const_counter_all_apb_reg__target_reg_b2_c3[]  = {
  {/* name */ "o_target_reg_b2_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , target register b2.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_status_c3[]  = {
  {/* name */ "i_capture_reg_status_c3", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "every bit means the same, 1--> new data, 0--> old data.\n[0] : for o_capture_reg_a0.\n[1] : for o_capture_reg_a0.\n[2] : for o_capture_reg_a0.\n[0] : for o_capture_reg_b0.\n[1] : for o_capture_reg_b1.\n[2] : for o_capture_reg_b2.\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:6]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_overflow_ctrl_c3[]  = {
  {/* name */ "o_capture_reg_overflow_ctrl_c3", /* range */ "[5:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "every bit means the same as i_capture_reg_status_c3.\n1--> rewrite, o--> discard.\n\n"}, 
  {/* name */ "o_capture_mode_automatic_validedge_c3", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "capture mode first valid edge flag on ,1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a0_c3[]  = {
  {/* name */ "i_capture_reg_a0_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a0.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a1_c3[]  = {
  {/* name */ "i_capture_reg_a1_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a1.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_a2_c3[]  = {
  {/* name */ "i_capture_reg_a2_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register a2.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b0_c3[]  = {
  {/* name */ "i_capture_reg_b0_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b0.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b1_c3[]  = {
  {/* name */ "i_capture_reg_b1_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b1.\n"}
};
field_const_t field_const_counter_all_apb_reg__capture_reg_b2_c3[]  = {
  {/* name */ "i_capture_reg_b2_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "capture mode, capture register b2.\n"}
};
field_const_t field_const_counter_all_apb_reg__switch_mode_onebit_cnts_c3[]  = {
  {/* name */ "o_switch_mode_onebit_cnts_c3", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform and capture switch mode, one bit data means counter value\n"}
};
field_const_t field_const_counter_all_apb_reg__waveform_mode_automatic_c3[]  = {
  {/* name */ "o_waveform_mode_cnts_c3", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "waveform mode , data sended counts.\n"}, 
  {/* name */ "o_capture_mode_cnts_c3", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "capture mode , data received counts.\n"}, 
  {/* name */ "o_waveform_mode_automatic_sw_c3", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "automatic switch to waveform mode. 1- enable,0-disable.\n"}, 
  {/* name */ "o_capture_mode_automatic_sw_c3", /* range */ "[24:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "automatic switch to capture mode. 1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:25]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftmode_ctrl_c3[]  = {
  {/* name */ "o_shiftmode_ctrl_c3", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "0-bus_a(din_a/dout_a),1-bus_b(din_b/dout_b).\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_ctrl_bitcnts_c3[]  = {
  {/* name */ "o_shiftout_data_ctrl_bitcnts_c3", /* range */ "[4:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "how man bits to shift out data from counter 3. valud 0 means 1 bit.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:5]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_c3[]  = {
  {/* name */ "o_shiftout_data_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "shift out data from counter 3\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftout_data_valid_c3[]  = {
  {/* name */ "o_shiftout_data_valid_c3", /* range */ "[0:0]", /* default */ "0x0", /* access */ "write-only", /* description */ "a new shift_out data flag, high pulse is valid.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftin_data_ctrl_bitcnts_c3[]  = {
  {/* name */ "o_shiftin_data_ctrl_bitcnts_c3", /* range */ "[4:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "how man bits of shift_in data for counter 3. \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:5]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__shiftin_data_c3[]  = {
  {/* name */ "i_shiftin_data_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "shift_in data.\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftin_databits_updated_c3[]  = {
  {/* name */ "i_shiftin_databits_updated_c3", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "shift_in data(bitmap is updated) for counter 3. value 1 is acitve.\n"}
};
field_const_t field_const_counter_all_apb_reg__shiftmode_point_en_c3[]  = {
  {/* name */ "o_shiftmode_point_cnts_c3", /* range */ "[15:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "shiftin data in this cnts or shiftout data in the cnts..\n"}, 
  {/* name */ "o_shiftmode_point_en_c3", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "shiftin data in this cnts or shiftout data in the cnts enable ,1 is active. 1- enable,0-disable.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__ir_din_bypass_c3[]  = {
  {/* name */ "o_ir_din_bypass_c3", /* range */ "[1:0]", /* default */ "0x3", /* access */ "read-write", /* description */ "bypass control bit,0->a,1->b.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_counter_all_apb_reg__ir_din_onecycle_value_a_c3[]  = {
  {/* name */ "o_ir_din_onecycle_value_a_c3", /* range */ "[31:0]", /* default */ "0x100", /* access */ "read-write", /* description */ "IR interface clk 's one cycle value for din,for bus a.\n"}
};
field_const_t field_const_counter_all_apb_reg__ir_din_onecycle_value_b_c3[]  = {
  {/* name */ "o_ir_din_onecycle_value_b_c3", /* range */ "[31:0]", /* default */ "0x100", /* access */ "read-write", /* description */ "IR interface clk 's one cycle value for din,for bus b.\n"}
};
field_const_t field_const_counter_all_apb_reg__ir_dout_bypass_c3[]  = {
  {/* name */ "o_ir_dout_opts_c3", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "opts control bit,0->a,1->b.\n"}, 
  {/* name */ "o_ir_dout_bypass_c3", /* range */ "[17:16]", /* default */ "0x3", /* access */ "read-write", /* description */ "dout bypass control bit,0->a,1->b.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:18]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};

field_const_array_t reg_pnt_list__counter_all_apb_reg[NUM_REGS__COUNTER_ALL_APB_REG] = {
  { /* pfield */ field_const_counter_all_apb_reg__intr_status, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__intr_mask_status, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__intr_clr, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__intr_set, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__intr_mask_set, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__intr_mask_clr, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__intr_sreset, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__global_start_trigger, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__global_stop_trigger, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__global_clear_trigger, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__global_reset_trigger, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__din_mux_sel, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__dout_mux_sel, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__dout_enable_ctrl, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_start_trigger_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_stop_trigger_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_clear_trigger_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_reset_trigger_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__enable_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__soft_trigger_ctrl_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__mux_sel_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__src_sel_edge_c0, /* size */ 9}, 
  { /* pfield */ field_const_counter_all_apb_reg__snap_status_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ctrl_snap_c0, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__shadow_reg_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__mode_sel_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_ctrl_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a0_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a1_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a2_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b0_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b1_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b2_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_status_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_overflow_ctrl_c0, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a0_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a1_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a2_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b0_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b1_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b2_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__switch_mode_onebit_cnts_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__waveform_mode_automatic_c0, /* size */ 5}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftmode_ctrl_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_ctrl_bitcnts_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_valid_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_data_ctrl_bitcnts_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_data_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_databits_updated_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftmode_point_en_c0, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_bypass_c0, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_onecycle_value_a_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_onecycle_value_b_c0, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_dout_bypass_c0, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_start_trigger_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_stop_trigger_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_clear_trigger_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_reset_trigger_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__enable_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__soft_trigger_ctrl_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__mux_sel_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__src_sel_edge_c1, /* size */ 9}, 
  { /* pfield */ field_const_counter_all_apb_reg__snap_status_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ctrl_snap_c1, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__shadow_reg_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__mode_sel_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_ctrl_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a0_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a1_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a2_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b0_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b1_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b2_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_status_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_overflow_ctrl_c1, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a0_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a1_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a2_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b0_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b1_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b2_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__switch_mode_onebit_cnts_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__waveform_mode_automatic_c1, /* size */ 5}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftmode_ctrl_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_ctrl_bitcnts_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_valid_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_data_ctrl_bitcnts_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_data_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_databits_updated_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftmode_point_en_c1, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_bypass_c1, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_onecycle_value_a_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_onecycle_value_b_c1, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_dout_bypass_c1, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_start_trigger_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_stop_trigger_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_clear_trigger_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_reset_trigger_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__enable_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__soft_trigger_ctrl_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__mux_sel_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__src_sel_edge_c2, /* size */ 9}, 
  { /* pfield */ field_const_counter_all_apb_reg__snap_status_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ctrl_snap_c2, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__shadow_reg_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__mode_sel_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_ctrl_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a0_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a1_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a2_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b0_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b1_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b2_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_status_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_overflow_ctrl_c2, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a0_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a1_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a2_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b0_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b1_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b2_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__switch_mode_onebit_cnts_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__waveform_mode_automatic_c2, /* size */ 5}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftmode_ctrl_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_ctrl_bitcnts_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_valid_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_data_ctrl_bitcnts_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_data_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_databits_updated_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftmode_point_en_c2, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_bypass_c2, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_onecycle_value_a_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_onecycle_value_b_c2, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_dout_bypass_c2, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_start_trigger_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_stop_trigger_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_clear_trigger_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__single_reset_trigger_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__enable_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__soft_trigger_ctrl_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__mux_sel_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__src_sel_edge_c3, /* size */ 9}, 
  { /* pfield */ field_const_counter_all_apb_reg__snap_status_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ctrl_snap_c3, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__shadow_reg_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__mode_sel_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_ctrl_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a0_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a1_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_a2_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b0_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b1_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__target_reg_b2_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_status_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_overflow_ctrl_c3, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a0_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a1_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_a2_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b0_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b1_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__capture_reg_b2_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__switch_mode_onebit_cnts_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__waveform_mode_automatic_c3, /* size */ 5}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftmode_ctrl_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_ctrl_bitcnts_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftout_data_valid_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_data_ctrl_bitcnts_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_data_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftin_databits_updated_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__shiftmode_point_en_c3, /* size */ 3}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_bypass_c3, /* size */ 2}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_onecycle_value_a_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_din_onecycle_value_b_c3, /* size */ 1}, 
  { /* pfield */ field_const_counter_all_apb_reg__ir_dout_bypass_c3, /* size */ 3}
};
